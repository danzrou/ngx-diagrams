{
    "pipes": [],
    "interfaces": [
        {
            "name": "Coords",
            "id": "interface-Coords-d8cccc3efd28aa1635090819cde4fee2",
            "file": "projects/ngx-diagrams/src/lib/interfaces/coords.interface.ts",
            "type": "interface",
            "sourceCode": "export interface Coords {\n\tx: number;\n\ty: number;\n}\n",
            "properties": [
                {
                    "name": "x",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DagreEngineOptions",
            "id": "interface-DagreEngineOptions-3fd39313e4e137fa0889cce425edf4cd",
            "file": "projects/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DiagramModel, PointModel } from '../models';\nimport * as dagre from 'dagre';\nimport { GraphLabel, NodeConfig, EdgeConfig } from 'dagre';\n\nexport interface DagreEngineOptions {\n\tgraph?: GraphLabel;\n\tlayout?: GraphLabel & NodeConfig & EdgeConfig;\n\t/**\n\t * Will also layout links\n\t */\n\tincludeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n\tg: dagre.graphlib.Graph;\n\tconstructor() {\n\t\ttry {\n\t\t\tthis.g = new dagre.graphlib.Graph({ multigraph: true });\n\t\t} catch (error) {\n\t\t\tconsole.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n\t\t}\n\t}\n\n\tredistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n\t\tthis.g.setGraph(options.graph || {});\n\n\t\tthis.g.setDefaultEdgeLabel(() => {\n\t\t\treturn {};\n\t\t});\n\n\t\tconst processedlinks: { [id: string]: boolean } = {};\n\n\t\t// set nodes\n\t\tObject.values(model.getNodes()).forEach(node => {\n\t\t\tthis.g.setNode(node.id, { width: node.getWidth(), height: node.getHeight() });\n\t\t});\n\n\t\tObject.values(model.getLinks()).forEach(link => {\n\t\t\t// set edges\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tprocessedlinks[link.id] = true;\n\t\t\t\tthis.g.setEdge({\n\t\t\t\t\tv: link.getSourcePort().getNode().id,\n\t\t\t\t\tw: link.getTargetPort().getNode().id,\n\t\t\t\t\tname: link.id,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// layout the graph\n\t\tdagre.layout(this.g, options.layout);\n\n\t\tthis.g.nodes().forEach(v => {\n\t\t\tconst { x, y } = this.g.node(v);\n\t\t\tmodel.getNode(v).setCoords({ x, y });\n\t\t});\n\n\t\t// also include links?\n\t\tif (options.includeLinks) {\n\t\t\tthis.g.edges().forEach(e => {\n\t\t\t\tconst edge = this.g.edge(e);\n\t\t\t\tconst link = model.getLink(e.name);\n\n\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\tfor (let i = 1; i < edge.points.length - 2; i++) {\n\t\t\t\t\tpoints.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n\t\t\t\t}\n\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t});\n\t\t}\n\t}\n}\n",
            "properties": [
                {
                    "name": "graph",
                    "type": "GraphLabel",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "includeLinks",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Will also layout links</p>\n",
                    "line": 12
                },
                {
                    "name": "layout",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DefaultPortModelConfig",
            "id": "interface-DefaultPortModelConfig-1a4ddbc0af8ef42ab1b542533b561f80",
            "file": "projects/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
            "type": "interface",
            "sourceCode": "import { PortModel } from '../../models/port.model';\nimport { LinkModel } from '../../models/link.model';\nimport { DefaultLinkModel } from './default-link.model';\n\nexport interface DefaultPortModelConfig {\n\tid?: string;\n\tisInput?: boolean;\n\tname?: string;\n\ttype?: string;\n\tlabel?: string;\n\tlinkType?: string;\n\tmaximumLinks?: number;\n}\n\nexport class DefaultPortModel extends PortModel {\n\tin: boolean;\n\tlabel: string;\n\tlinks: { [id: string]: any };\n\n\tconstructor({\n\t\tisInput = true,\n\t\tname = 'port',\n\t\ttype = 'default',\n\t\tid = null,\n\t\tlabel = null,\n\t\tlinkType = 'default',\n\t\tmaximumLinks = null,\n\t}: DefaultPortModelConfig = {}) {\n\t\tsuper(name, type, id, null, linkType);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\n\t\tif (this.in) {\n\t\t\tthis.setCanCreateLinks(false);\n\t\t} else {\n\t\t\tthis.setMaximumLinks(maximumLinks);\n\t\t\tthis.setMagnetic(false);\n\t\t}\n\t}\n\n\tlink(port: PortModel): LinkModel {\n\t\tif (super.getCanCreateLinks()) {\n\t\t\tconst link = new DefaultLinkModel({ type: this.getLinkType() });\n\t\t\tlink.setSourcePort(this);\n\t\t\tlink.setTargetPort(port);\n\t\t\treturn link;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcreateLinkModel() {\n\t\tif (super.getCanCreateLinks()) {\n\t\t\treturn new DefaultLinkModel({ type: this.getLinkType() });\n\t\t}\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (port instanceof DefaultPortModel) {\n\t\t\treturn this.in !== port.in;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isInput",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Dimensions",
            "id": "interface-Dimensions-9c5d7ee274bf21f5ed6b99fb17eaabbd",
            "file": "projects/ngx-diagrams/src/lib/interfaces/dimensions.interface.ts",
            "type": "interface",
            "sourceCode": "export interface Dimensions {\n\twidth: number;\n\theight: number;\n}\n",
            "properties": [
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SelectionModel",
            "id": "interface-SelectionModel-30bf77f56d6eac3438f7a14176ba5f7b",
            "file": "projects/ngx-diagrams/src/lib/models/move-selection.model.ts",
            "type": "interface",
            "sourceCode": "import { BaseModel } from './base.model';\nimport { BaseEntity } from '../base.entity';\nimport { PortModel } from './port.model';\n\nexport interface SelectionModel {\n\tmodel: BaseModel<BaseEntity>;\n\tinitialX: number;\n\tinitialY: number;\n\tmagnet?: PortModel;\n}\n",
            "properties": [
                {
                    "name": "initialX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "initialY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "magnet",
                    "type": "PortModel",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "model",
                    "type": "BaseModel<BaseEntity>",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SelectOptions",
            "id": "interface-SelectOptions-c139a93222654aeafa8d6e4abb29daaf",
            "file": "projects/ngx-diagrams/src/lib/interfaces/select-options.interface.ts",
            "type": "interface",
            "sourceCode": "export interface SelectOptions<E> {\n\t// asObject?: boolean;\n\tfilter?: ((entity: E) => boolean) | undefined;\n\t// limitTo?: number;\n}\n",
            "properties": [
                {
                    "name": "filter",
                    "type": " | undefined",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SerializedBaseModel",
            "id": "interface-SerializedBaseModel-69ec61077f665e9e4da534f4c46ef467",
            "file": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n\tlocked: boolean;\n\tid: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n\tnodes: SerializedNodeModel[];\n\tlinks: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tnodeType: string;\n\textras: {\n\t\t[s: string]: any;\n\t};\n\twidth: number;\n\theight: number;\n\ttype: string;\n\tid: string;\n\tlocked: boolean;\n\tports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n\tname?: string;\n\tsourcePort: string;\n\ttargetPort: string;\n\textras: any;\n\tpoints: SerializedPointModel[];\n\tlabel?: SerializedLabelModel;\n\ttype: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tname: string;\n\tlinkType: string;\n\tmaximumLinks: number;\n\ttype: string;\n\tmagnetic: boolean;\n\theight: number;\n\twidth: number;\n\tcanCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n\tcoords: Coords;\n\ttype: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n\ttype: string;\n\trotation: number;\n\tcoords: Coords;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "locked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SerializedDiagramModel",
            "id": "interface-SerializedDiagramModel-69ec61077f665e9e4da534f4c46ef467",
            "file": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n\tlocked: boolean;\n\tid: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n\tnodes: SerializedNodeModel[];\n\tlinks: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tnodeType: string;\n\textras: {\n\t\t[s: string]: any;\n\t};\n\twidth: number;\n\theight: number;\n\ttype: string;\n\tid: string;\n\tlocked: boolean;\n\tports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n\tname?: string;\n\tsourcePort: string;\n\ttargetPort: string;\n\textras: any;\n\tpoints: SerializedPointModel[];\n\tlabel?: SerializedLabelModel;\n\ttype: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tname: string;\n\tlinkType: string;\n\tmaximumLinks: number;\n\ttype: string;\n\tmagnetic: boolean;\n\theight: number;\n\twidth: number;\n\tcanCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n\tcoords: Coords;\n\ttype: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n\ttype: string;\n\trotation: number;\n\tcoords: Coords;\n}\n",
            "properties": [
                {
                    "name": "links",
                    "type": "SerializedLinkModel[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nodes",
                    "type": "SerializedNodeModel[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedLabelModel",
            "id": "interface-SerializedLabelModel-69ec61077f665e9e4da534f4c46ef467",
            "file": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n\tlocked: boolean;\n\tid: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n\tnodes: SerializedNodeModel[];\n\tlinks: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tnodeType: string;\n\textras: {\n\t\t[s: string]: any;\n\t};\n\twidth: number;\n\theight: number;\n\ttype: string;\n\tid: string;\n\tlocked: boolean;\n\tports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n\tname?: string;\n\tsourcePort: string;\n\ttargetPort: string;\n\textras: any;\n\tpoints: SerializedPointModel[];\n\tlabel?: SerializedLabelModel;\n\ttype: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tname: string;\n\tlinkType: string;\n\tmaximumLinks: number;\n\ttype: string;\n\tmagnetic: boolean;\n\theight: number;\n\twidth: number;\n\tcanCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n\tcoords: Coords;\n\ttype: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n\ttype: string;\n\trotation: number;\n\tcoords: Coords;\n}\n",
            "properties": [
                {
                    "name": "coords",
                    "type": "Coords",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "rotation",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedLinkModel",
            "id": "interface-SerializedLinkModel-69ec61077f665e9e4da534f4c46ef467",
            "file": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n\tlocked: boolean;\n\tid: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n\tnodes: SerializedNodeModel[];\n\tlinks: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tnodeType: string;\n\textras: {\n\t\t[s: string]: any;\n\t};\n\twidth: number;\n\theight: number;\n\ttype: string;\n\tid: string;\n\tlocked: boolean;\n\tports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n\tname?: string;\n\tsourcePort: string;\n\ttargetPort: string;\n\textras: any;\n\tpoints: SerializedPointModel[];\n\tlabel?: SerializedLabelModel;\n\ttype: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tname: string;\n\tlinkType: string;\n\tmaximumLinks: number;\n\ttype: string;\n\tmagnetic: boolean;\n\theight: number;\n\twidth: number;\n\tcanCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n\tcoords: Coords;\n\ttype: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n\ttype: string;\n\trotation: number;\n\tcoords: Coords;\n}\n",
            "properties": [
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "label",
                    "type": "SerializedLabelModel",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "points",
                    "type": "SerializedPointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sourcePort",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "targetPort",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedNodeModel",
            "id": "interface-SerializedNodeModel-69ec61077f665e9e4da534f4c46ef467",
            "file": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n\tlocked: boolean;\n\tid: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n\tnodes: SerializedNodeModel[];\n\tlinks: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tnodeType: string;\n\textras: {\n\t\t[s: string]: any;\n\t};\n\twidth: number;\n\theight: number;\n\ttype: string;\n\tid: string;\n\tlocked: boolean;\n\tports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n\tname?: string;\n\tsourcePort: string;\n\ttargetPort: string;\n\textras: any;\n\tpoints: SerializedPointModel[];\n\tlabel?: SerializedLabelModel;\n\ttype: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tname: string;\n\tlinkType: string;\n\tmaximumLinks: number;\n\ttype: string;\n\tmagnetic: boolean;\n\theight: number;\n\twidth: number;\n\tcanCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n\tcoords: Coords;\n\ttype: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n\ttype: string;\n\trotation: number;\n\tcoords: Coords;\n}\n",
            "properties": [
                {
                    "name": "extras",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "locked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nodeType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ports",
                    "type": "SerializedPortModel[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "x",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedPointModel",
            "id": "interface-SerializedPointModel-69ec61077f665e9e4da534f4c46ef467",
            "file": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n\tlocked: boolean;\n\tid: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n\tnodes: SerializedNodeModel[];\n\tlinks: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tnodeType: string;\n\textras: {\n\t\t[s: string]: any;\n\t};\n\twidth: number;\n\theight: number;\n\ttype: string;\n\tid: string;\n\tlocked: boolean;\n\tports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n\tname?: string;\n\tsourcePort: string;\n\ttargetPort: string;\n\textras: any;\n\tpoints: SerializedPointModel[];\n\tlabel?: SerializedLabelModel;\n\ttype: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tname: string;\n\tlinkType: string;\n\tmaximumLinks: number;\n\ttype: string;\n\tmagnetic: boolean;\n\theight: number;\n\twidth: number;\n\tcanCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n\tcoords: Coords;\n\ttype: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n\ttype: string;\n\trotation: number;\n\tcoords: Coords;\n}\n",
            "properties": [
                {
                    "name": "coords",
                    "type": "Coords",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        },
        {
            "name": "SerializedPortModel",
            "id": "interface-SerializedPortModel-69ec61077f665e9e4da534f4c46ef467",
            "file": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
            "type": "interface",
            "sourceCode": "import { Coords } from './';\n\nexport interface SerializedBaseModel {\n\tlocked: boolean;\n\tid: string;\n}\n\nexport interface SerializedDiagramModel extends SerializedBaseModel {\n\tnodes: SerializedNodeModel[];\n\tlinks: SerializedLinkModel[];\n}\n\nexport interface SerializedNodeModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tnodeType: string;\n\textras: {\n\t\t[s: string]: any;\n\t};\n\twidth: number;\n\theight: number;\n\ttype: string;\n\tid: string;\n\tlocked: boolean;\n\tports: SerializedPortModel[];\n}\n\nexport interface SerializedLinkModel extends SerializedBaseModel {\n\tname?: string;\n\tsourcePort: string;\n\ttargetPort: string;\n\textras: any;\n\tpoints: SerializedPointModel[];\n\tlabel?: SerializedLabelModel;\n\ttype: string;\n}\n\nexport interface SerializedPortModel extends SerializedBaseModel {\n\tx: number;\n\ty: number;\n\tname: string;\n\tlinkType: string;\n\tmaximumLinks: number;\n\ttype: string;\n\tmagnetic: boolean;\n\theight: number;\n\twidth: number;\n\tcanCreateLinks: boolean;\n}\n\nexport interface SerializedPointModel extends SerializedBaseModel {\n\tcoords: Coords;\n\ttype: string;\n}\n\nexport interface SerializedLabelModel extends SerializedBaseModel {\n\ttype: string;\n\trotation: number;\n\tcoords: Coords;\n}\n",
            "properties": [
                {
                    "name": "canCreateLinks",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "magnetic",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "x",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "y",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SerializedBaseModel"
        }
    ],
    "injectables": [
        {
            "name": "DagreEngine",
            "id": "injectable-DagreEngine-3fd39313e4e137fa0889cce425edf4cd",
            "file": "projects/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
            "properties": [
                {
                    "name": "g",
                    "type": "dagre.graphlib.Graph",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "redistribute",
                    "args": [
                        {
                            "name": "model",
                            "type": "DiagramModel"
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "DiagramModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DagreEngineOptions",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DiagramModel, PointModel } from '../models';\nimport * as dagre from 'dagre';\nimport { GraphLabel, NodeConfig, EdgeConfig } from 'dagre';\n\nexport interface DagreEngineOptions {\n\tgraph?: GraphLabel;\n\tlayout?: GraphLabel & NodeConfig & EdgeConfig;\n\t/**\n\t * Will also layout links\n\t */\n\tincludeLinks?: boolean;\n}\n\n@Injectable()\nexport class DagreEngine {\n\tg: dagre.graphlib.Graph;\n\tconstructor() {\n\t\ttry {\n\t\t\tthis.g = new dagre.graphlib.Graph({ multigraph: true });\n\t\t} catch (error) {\n\t\t\tconsole.warn(\"`dagre` packages isn't installed, please install it before using the DagreEngine plugin\");\n\t\t}\n\t}\n\n\tredistribute(model: DiagramModel, options: DagreEngineOptions = {}): void {\n\t\tthis.g.setGraph(options.graph || {});\n\n\t\tthis.g.setDefaultEdgeLabel(() => {\n\t\t\treturn {};\n\t\t});\n\n\t\tconst processedlinks: { [id: string]: boolean } = {};\n\n\t\t// set nodes\n\t\tObject.values(model.getNodes()).forEach(node => {\n\t\t\tthis.g.setNode(node.id, { width: node.getWidth(), height: node.getHeight() });\n\t\t});\n\n\t\tObject.values(model.getLinks()).forEach(link => {\n\t\t\t// set edges\n\t\t\tif (link.getSourcePort() && link.getTargetPort()) {\n\t\t\t\tprocessedlinks[link.id] = true;\n\t\t\t\tthis.g.setEdge({\n\t\t\t\t\tv: link.getSourcePort().getNode().id,\n\t\t\t\t\tw: link.getTargetPort().getNode().id,\n\t\t\t\t\tname: link.id,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// layout the graph\n\t\tdagre.layout(this.g, options.layout);\n\n\t\tthis.g.nodes().forEach(v => {\n\t\t\tconst { x, y } = this.g.node(v);\n\t\t\tmodel.getNode(v).setCoords({ x, y });\n\t\t});\n\n\t\t// also include links?\n\t\tif (options.includeLinks) {\n\t\t\tthis.g.edges().forEach(e => {\n\t\t\t\tconst edge = this.g.edge(e);\n\t\t\t\tconst link = model.getLink(e.name);\n\n\t\t\t\tconst points = [link.getFirstPoint()];\n\t\t\t\tfor (let i = 1; i < edge.points.length - 2; i++) {\n\t\t\t\t\tpoints.push(new PointModel(link, { x: edge.points[i].x, y: edge.points[i].y }));\n\t\t\t\t}\n\t\t\t\tlink.setPoints(points.concat(link.getLastPoint()));\n\t\t\t});\n\t\t}\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "DiagramEngine",
            "id": "injectable-DiagramEngine-30029746d556fedf08051d0c81a42e26",
            "file": "projects/ngx-diagrams/src/lib/services/engine.service.ts",
            "properties": [
                {
                    "name": "_renderer",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canvas$",
                    "type": "BehaviorSubject<Element>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canvasMatrix",
                    "defaultValue": "[]",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "diagramModel",
                    "type": "DiagramModel",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "hAdjustmentFactor",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "labelFactories",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "linkFactories",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "markMatrixPoint",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 529
                },
                {
                    "name": "nodeFactories",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pathFinding",
                    "type": "PathFinding",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "portFactories",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "routingMatrix",
                    "defaultValue": "[]",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "smartRouting",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "vAdjustmentFactor",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methods": [
                {
                    "name": "calculateCanvasMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318
                },
                {
                    "name": "calculateMatrixDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 336,
                    "description": "<p>Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\nto find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.</p>\n"
                },
                {
                    "name": "calculateRoutingMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 474
                },
                {
                    "name": "createDiagram",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "generateWidgetForLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 170,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWidgetForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef | null",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCanvasMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 432,
                    "description": "<p>A representation of the canvas in the following format:</p>\n<p>+-----------------+\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n| 0 0 0 0 0 0 0 0 |\n+-----------------+</p>\n<p>In which all walkable points are marked by zeros.\nIt uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.</p>\n"
                },
                {
                    "name": "getDiagramModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 267
                },
                {
                    "name": "getFactoryForLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLabelFactory | null",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLinkFactory | null",
                    "typeParameters": [],
                    "line": 166,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractNodeFactory | null",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFactoryForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractPortFactory | null",
                    "typeParameters": [],
                    "line": 138,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabelFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "getLabelFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLabelFactory",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinkFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "getLinkFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractLinkFactory",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeDimensions",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 233,
                    "description": "<p>Determine the width and height of the node passed in.\nIt currently assumes nodes have a rectangular shape, can be overriden for customised shapes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeElement",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 179,
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodeFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "getNodeFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractNodeFactory",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodePortElement",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 187,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPathfinding",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 314
                },
                {
                    "name": "getPortCenter",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: number; y: number; }",
                    "typeParameters": [],
                    "line": 195,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPortCoords",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 209,
                    "description": "<p>Calculate rectangular coordinates of the port passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPortFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "{ [s: string]: any; }",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "getPortFactory",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractPortFactory",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRelativeMousePoint",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 254,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRelativePoint",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: number; y: number; }",
                    "typeParameters": [],
                    "line": 262,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoutingMatrix",
                    "args": [],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 466,
                    "description": "<p>A representation of the canvas in the following format:</p>\n<p>+-----------------+\n| 0 0 1 1 0 0 0 0 |\n| 0 0 1 1 0 0 1 1 |\n| 0 0 0 0 0 0 1 1 |\n| 1 1 0 0 0 0 0 0 |\n| 1 1 0 0 0 0 0 0 |\n+-----------------+</p>\n<p>In which all points blocked by a node (and its ports) are\nmarked as 1; points were there is nothing (ie, free) receive 0.</p>\n"
                },
                {
                    "name": "getSmartRouting",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 486
                },
                {
                    "name": "isModelLocked",
                    "args": [
                        {
                            "name": "model",
                            "type": "BaseEntity"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 271,
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "BaseEntity",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markNodes",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 493,
                    "description": "<p>Updates (by reference) where nodes will be drawn on the matrix passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markPorts",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 511,
                    "description": "<p>Updates (by reference) where ports will be drawn on the matrix passed in.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerDefaultFactories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "registerLabelFactory",
                    "args": [
                        {
                            "name": "labelFactory",
                            "type": "AbstractLabelFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "labelFactory",
                            "type": "AbstractLabelFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerLinkFactory",
                    "args": [
                        {
                            "name": "factory",
                            "type": "AbstractLinkFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "factory",
                            "type": "AbstractLinkFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerNodeFactory",
                    "args": [
                        {
                            "name": "nodeFactory",
                            "type": "AbstractNodeFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "nodeFactory",
                            "type": "AbstractNodeFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerPortFactory",
                    "args": [
                        {
                            "name": "factory",
                            "type": "AbstractPortFactory"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "factory",
                            "type": "AbstractPortFactory",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCanvas",
                    "args": [
                        {
                            "name": "canvas",
                            "type": "Element"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "jsdoctags": [
                        {
                            "name": "canvas",
                            "type": "Element",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSmartRoutingStatus",
                    "args": [
                        {
                            "name": "status",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateRoutingX",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 445,
                    "description": "<p>The routing matrix does not have negative indexes, but elements could be negatively positioned.\nWe use the functions below to translate back and forth between these coordinates, relying on the\ncalculated values of hAdjustmentFactor and vAdjustmentFactor.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateRoutingY",
                    "args": [
                        {
                            "name": "y",
                            "type": "number"
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 448,
                    "jsdoctags": [
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reverse",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "zoomToFit",
                    "args": [
                        {
                            "name": "additionalZoomFactor",
                            "type": "number",
                            "defaultValue": "0.005"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "description": "<p>fit the canvas zoom levels to the elements contained.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9432,
                                "end": 9452,
                                "flags": 0,
                                "escapedText": "additionalZoomFactor"
                            },
                            "type": "number",
                            "defaultValue": "0.005",
                            "tagName": {
                                "pos": 9426,
                                "end": 9431,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>allow for further zooming out to make sure edges doesn&#39;t cut</p>\n"
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable, ComponentFactoryResolver, ViewContainerRef, ComponentRef, Renderer2, RendererFactory2 } from '@angular/core';\nimport { AbstractNodeFactory } from '../factories/node.factory';\nimport { DiagramModel } from '../models/diagram.model';\nimport { DefaultNodeFactory } from '../defaults/factories/default-node.factory';\nimport { NodeModel } from '../models/node.model';\nimport { AbstractLinkFactory } from '../factories/link.factory';\nimport { AbstractPortFactory } from '../factories/port.factory';\nimport { DefaultPortFactory } from '../defaults/factories/default-port.factory';\nimport { LinkModel } from '../models/link.model';\nimport { PortModel } from '../models/port.model';\nimport { BehaviorSubject } from 'rxjs';\nimport { take, delay, filter } from 'rxjs/operators';\nimport { DefaultLinkFactory } from '../defaults/factories/default-link.factory';\nimport { BaseEntity } from '../base.entity';\nimport { NgxDiagramsModule } from '../ngx-diagrams.module';\nimport { AbstractLabelFactory } from '../factories/label.factory';\nimport { LabelModel } from '../models/label.model';\nimport { DefaultLabelFactory } from '../defaults/factories/default-label.factory';\nimport { PathFinding, ROUTING_SCALING_FACTOR } from '../plugins/smart-routing.plugin';\n\n@Injectable({ providedIn: NgxDiagramsModule })\nexport class DiagramEngine {\n\tprivate _renderer: Renderer2;\n\tprivate nodeFactories: { [s: string]: AbstractNodeFactory };\n\tprivate labelFactories: { [s: string]: AbstractLabelFactory };\n\tprivate linkFactories: { [s: string]: AbstractLinkFactory };\n\tprivate portFactories: { [s: string]: AbstractPortFactory };\n\tprivate canvas$: BehaviorSubject<Element>;\n\n\t// smart routing related properties\n\tsmartRouting: boolean;\n\tpathFinding: PathFinding;\n\n\t// calculated only when smart routing is active\n\tcanvasMatrix: number[][] = [];\n\troutingMatrix: number[][] = [];\n\n\t// used when at least one element has negative coordinates\n\thAdjustmentFactor = 0;\n\tvAdjustmentFactor = 0;\n\n\tdiagramModel: DiagramModel;\n\n\tconstructor(private resolver: ComponentFactoryResolver, private rendererFactory: RendererFactory2) {\n\t\tthis._renderer = this.rendererFactory.createRenderer(null, null);\n\t\tthis.nodeFactories = {};\n\t\tthis.linkFactories = {};\n\t\tthis.portFactories = {};\n\t\tthis.labelFactories = {};\n\t\tthis.canvas$ = new BehaviorSubject<Element>(null);\n\t}\n\n\tcreateDiagram() {\n\t\tthis.diagramModel = new DiagramModel(this);\n\t\treturn this.diagramModel;\n\t}\n\n\tregisterDefaultFactories() {\n\t\tthis.registerNodeFactory(new DefaultNodeFactory(this.resolver, this._renderer));\n\t\tthis.registerPortFactory(new DefaultPortFactory(this.resolver, this._renderer));\n\t\tthis.registerLinkFactory(new DefaultLinkFactory(this.resolver, this._renderer));\n\t\tthis.registerLabelFactory(new DefaultLabelFactory(this.resolver, this._renderer));\n\t}\n\n\t//#region Factories\n\t// LABELS\n\tregisterLabelFactory(labelFactory: AbstractLabelFactory) {\n\t\tthis.labelFactories[labelFactory.type] = labelFactory;\n\t}\n\n\tgetLabelFactories(): { [s: string]: AbstractLabelFactory } {\n\t\treturn this.labelFactories;\n\t}\n\n\tgetLabelFactory(type: string): AbstractLabelFactory {\n\t\tif (this.labelFactories[type]) {\n\t\t\treturn this.labelFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for node of type: [${type}]`);\n\t}\n\n\tgetFactoryForLabel(label: LabelModel): AbstractLabelFactory | null {\n\t\treturn this.getLabelFactory(label.getType());\n\t}\n\n\tgenerateWidgetForLabel(label: LabelModel, labelHost: ViewContainerRef): ComponentRef<LabelModel> | null {\n\t\tconst labelFactory = this.getFactoryForLabel(label);\n\t\tif (!labelFactory) {\n\t\t\tthrow new Error(`Cannot find widget factory for node: ${label.getType()}`);\n\t\t}\n\t\treturn labelFactory.generateWidget(label, labelHost);\n\t}\n\n\t// NODES\n\tregisterNodeFactory(nodeFactory: AbstractNodeFactory) {\n\t\tthis.nodeFactories[nodeFactory.type] = nodeFactory;\n\t}\n\n\tgetNodeFactories(): { [s: string]: AbstractNodeFactory } {\n\t\treturn this.nodeFactories;\n\t}\n\n\tgetNodeFactory(type: string): AbstractNodeFactory {\n\t\tif (this.nodeFactories[type]) {\n\t\t\treturn this.nodeFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for node of type: [${type}]`);\n\t}\n\n\tgetFactoryForNode(node: NodeModel): AbstractNodeFactory | null {\n\t\treturn this.getNodeFactory(node.getType());\n\t}\n\n\tgenerateWidgetForNode(node: NodeModel, nodesHost: ViewContainerRef): ComponentRef<NodeModel> | null {\n\t\tconst nodeFactory = this.getFactoryForNode(node);\n\t\tif (!nodeFactory) {\n\t\t\tthrow new Error(`Cannot find widget factory for node: ${node.getType()}`);\n\t\t}\n\t\treturn nodeFactory.generateWidget(this, node, nodesHost);\n\t}\n\n\t// PORTS\n\tregisterPortFactory(factory: AbstractPortFactory) {\n\t\tthis.portFactories[factory.type] = factory;\n\t}\n\n\tgetPortFactories() {\n\t\treturn this.portFactories;\n\t}\n\n\tgetPortFactory(type: string): AbstractPortFactory {\n\t\tif (this.portFactories[type]) {\n\t\t\treturn this.portFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for port of type: [${type}]`);\n\t}\n\n\tgetFactoryForPort(port: PortModel): AbstractPortFactory | null {\n\t\treturn this.getPortFactory(port.getType());\n\t}\n\n\tgenerateWidgetForPort(port: PortModel, portsHost: ViewContainerRef): ComponentRef<PortModel> | null {\n\t\tconst portFactory = this.getFactoryForPort(port);\n\t\tif (!portFactory) {\n\t\t\tthrow new Error(`Cannot find widget factory for port: ${port.getType()}`);\n\t\t}\n\t\treturn portFactory.generateWidget(port, portsHost);\n\t}\n\n\t// LINKS\n\tgetLinkFactories(): { [s: string]: AbstractLinkFactory } {\n\t\treturn this.linkFactories;\n\t}\n\n\tregisterLinkFactory(factory: AbstractLinkFactory) {\n\t\tthis.linkFactories[factory.type] = factory;\n\t}\n\n\tgetLinkFactory(type: string): AbstractLinkFactory {\n\t\tif (this.linkFactories[type]) {\n\t\t\treturn this.linkFactories[type];\n\t\t}\n\t\tthrow new Error(`cannot find factory for link of type: [${type}]`);\n\t}\n\n\tgetFactoryForLink(link: LinkModel): AbstractLinkFactory | null {\n\t\treturn this.getLinkFactory(link.getType());\n\t}\n\n\tgenerateWidgetForLink(link: LinkModel, linksHost: ViewContainerRef): ComponentRef<LinkModel> | null {\n\t\tconst linkFactory = this.getFactoryForLink(link);\n\t\tif (!linkFactory) {\n\t\t\tthrow new Error(`Cannot find link factory for link: ${link.getType()}`);\n\t\t}\n\t\treturn linkFactory.generateWidget(this, link, linksHost);\n\t}\n\t//#endregion\n\n\tgetNodeElement(node: NodeModel): HTMLElement {\n\t\tconst selector = this.canvas$.getValue().querySelector(`[data-nodeid=\"${node.id}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node element with node id: [' + node.id + ']');\n\t\t}\n\t\treturn selector as HTMLElement;\n\t}\n\n\tgetNodePortElement(port: PortModel): HTMLElement {\n\t\tconst selector = this.canvas$.getValue().querySelector(`[data-nodeid=\"${port.getParent().id}\"] [data-portid=\"${port.id}\"]`);\n\t\tif (selector === null) {\n\t\t\tthrow new Error('Cannot find Node Port element with node id: [' + port.getParent().id + '] and port id: [' + port.id + ']');\n\t\t}\n\t\treturn selector as HTMLElement;\n\t}\n\n\tgetPortCenter(port: PortModel) {\n\t\tconst sourceElement = this.getNodePortElement(port);\n\t\tconst sourceRect = sourceElement.getBoundingClientRect();\n\t\tconst rel = this.getRelativePoint(sourceRect.left, sourceRect.top);\n\n\t\treturn {\n\t\t\tx: sourceElement.offsetWidth / 2 + (rel.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty: sourceElement.offsetHeight / 2 + (rel.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t};\n\t}\n\n\t/**\n\t * Calculate rectangular coordinates of the port passed in.\n\t */\n\tgetPortCoords(\n\t\tport: PortModel\n\t): {\n\t\tx: number;\n\t\ty: number;\n\t\twidth: number;\n\t\theight: number;\n\t} {\n\t\tconst sourceElement = this.getNodePortElement(port);\n\t\tconst sourceRect = sourceElement.getBoundingClientRect() as DOMRect;\n\t\tconst canvasRect = this.canvas$.getValue().getBoundingClientRect() as ClientRect;\n\n\t\treturn {\n\t\t\tx: (sourceRect.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0) - canvasRect.left,\n\t\t\ty: (sourceRect.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0) - canvasRect.top,\n\t\t\twidth: sourceRect.width,\n\t\t\theight: sourceRect.height,\n\t\t};\n\t}\n\n\t/**\n\t * Determine the width and height of the node passed in.\n\t * It currently assumes nodes have a rectangular shape, can be overriden for customised shapes.\n\t */\n\tgetNodeDimensions(node: NodeModel): { width: number; height: number } {\n\t\tif (!this.canvas$.getValue()) {\n\t\t\treturn {\n\t\t\t\twidth: 0,\n\t\t\t\theight: 0,\n\t\t\t};\n\t\t}\n\n\t\tconst nodeElement = this.getNodeElement(node);\n\t\tconst nodeRect = nodeElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\twidth: nodeRect.width,\n\t\t\theight: nodeRect.height,\n\t\t};\n\t}\n\n\tsetCanvas(canvas: Element) {\n\t\tthis.canvas$.next(canvas);\n\t}\n\n\tgetRelativeMousePoint(event: MouseEvent): { x: number; y: number } {\n\t\tconst point = this.getRelativePoint(event.clientX, event.clientY);\n\t\treturn {\n\t\t\tx: (point.x - this.diagramModel.getOffsetX()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t\ty: (point.y - this.diagramModel.getOffsetY()) / (this.diagramModel.getZoomLevel() / 100.0),\n\t\t};\n\t}\n\n\tgetRelativePoint(x: number, y: number) {\n\t\tconst canvasRect = this.canvas$.getValue().getBoundingClientRect();\n\t\treturn { x: x - canvasRect.left, y: y - canvasRect.top };\n\t}\n\n\tgetDiagramModel() {\n\t\treturn this.diagramModel;\n\t}\n\n\tisModelLocked(model: BaseEntity) {\n\t\tif (this.diagramModel.getLocked()) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn model.getLocked();\n\t}\n\n\t/**\n\t * fit the canvas zoom levels to the elements contained.\n\t * @param additionalZoomFactor allow for further zooming out to make sure edges doesn't cut\n\t */\n\tzoomToFit(additionalZoomFactor: number = 0.005) {\n\t\tthis.canvas$.pipe(filter(Boolean), take(1), delay(0)).subscribe((canvas: HTMLElement) => {\n\t\t\tconst xFactor = canvas.clientWidth / canvas.scrollWidth;\n\t\t\tconst yFactor = canvas.clientHeight / canvas.scrollHeight;\n\t\t\tconst zoomFactor = xFactor < yFactor ? xFactor : yFactor;\n\n\t\t\tlet newZoomLvl = this.diagramModel.getZoomLevel() * (zoomFactor - additionalZoomFactor);\n\t\t\tconst maxZoomOut = this.diagramModel.getMaxZoomOut();\n\n\t\t\tif (maxZoomOut && newZoomLvl < maxZoomOut) {\n\t\t\t\tnewZoomLvl = maxZoomOut;\n\t\t\t}\n\n\t\t\tthis.diagramModel.setZoomLevel(newZoomLvl);\n\n\t\t\t// TODO: either block the canvas movement on 0,0 or detect the top left furthest element and set the offest to its edges\n\t\t\tthis.diagramModel.setOffset(0, 0);\n\t\t});\n\t}\n\n\t// SMART ROUTING\n\tsetSmartRoutingStatus(status: boolean) {\n\t\tif (status && !this.pathFinding) {\n\t\t\tthis.pathFinding = new PathFinding(this);\n\t\t} else {\n\t\t\tthis.pathFinding = null;\n\t\t}\n\n\t\tthis.smartRouting = status;\n\t}\n\n\tgetPathfinding() {\n\t\treturn this.pathFinding;\n\t}\n\n\tcalculateCanvasMatrix() {\n\t\tconst { width: canvasWidth, hAdjustmentFactor, height: canvasHeight, vAdjustmentFactor } = this.calculateMatrixDimensions();\n\n\t\tthis.hAdjustmentFactor = hAdjustmentFactor;\n\t\tthis.vAdjustmentFactor = vAdjustmentFactor;\n\n\t\tconst matrixWidth = Math.ceil(canvasWidth / ROUTING_SCALING_FACTOR);\n\t\tconst matrixHeight = Math.ceil(canvasHeight / ROUTING_SCALING_FACTOR);\n\n\t\tthis.canvasMatrix = Array.from({ length: matrixHeight }, (_, i) => i + 1).map(() => {\n\t\t\treturn new Array(matrixWidth).fill(0);\n\t\t});\n\t}\n\n\t/**\n\t * Despite being a long method, we simply iterate over all three collections (nodes, ports and points)\n\t * to find the highest X and Y dimensions, so we can build the matrix large enough to contain all elements.\n\t */\n\tcalculateMatrixDimensions(): {\n\t\twidth: number;\n\t\thAdjustmentFactor: number;\n\t\theight: number;\n\t\tvAdjustmentFactor: number;\n\t} {\n\t\tconst allNodesCoords = Object.values(this.diagramModel.getNodes()).map(item => ({\n\t\t\tx: item.getCoords().x,\n\t\t\twidth: item.getWidth(),\n\t\t\ty: item.getCoords().y,\n\t\t\theight: item.getHeight(),\n\t\t}));\n\n\t\tconst allLinks = Object.values(this.diagramModel.getLinks());\n\n\t\tconst allPortsCoords = allLinks\n\t\t\t.flatMap(link => [link.getSourcePort(), link.getTargetPort()])\n\t\t\t.filter(port => port !== null)\n\t\t\t.map(item => ({\n\t\t\t\tx: item.getX(),\n\t\t\t\twidth: item.getWidth(),\n\t\t\t\ty: item.getY(),\n\t\t\t\theight: item.getHeight(),\n\t\t\t}));\n\n\t\tconst allPointsCoords = allLinks\n\t\t\t.flatMap(link => link.getPoints())\n\t\t\t.map(item => ({\n\t\t\t\t// points don't have width/height, so let's just use 0\n\t\t\t\tx: item.getCoords().x,\n\t\t\t\twidth: 0,\n\t\t\t\ty: item.getCoords().y,\n\t\t\t\theight: 0,\n\t\t\t}));\n\n\t\tconst canvas = this.canvas$.getValue() as HTMLDivElement;\n\n\t\tconst allElements = allNodesCoords.concat(allPortsCoords, allPointsCoords);\n\n\t\tconst minX =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(\n\t\t\t\t\tallElements.reduce((a, b) => {\n\t\t\t\t\t\treturn a.x <= b.x ? a : b;\n\t\t\t\t\t}).x,\n\t\t\t\t\t0\n\t\t\t\t) / ROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\n\t\tconst maxXElement = allElements.reduce((a, b) => {\n\t\t\treturn a.x + a.width >= b.x + b.width ? a : b;\n\t\t});\n\n\t\tconst maxX = Math.max(maxXElement.x + maxXElement.width, canvas.offsetWidth);\n\n\t\tconst minY =\n\t\t\tMath.floor(\n\t\t\t\tMath.min(\n\t\t\t\t\tallElements.reduce((a, b) => {\n\t\t\t\t\t\treturn a.y <= b.y ? a : b;\n\t\t\t\t\t}).y,\n\t\t\t\t\t0\n\t\t\t\t) / ROUTING_SCALING_FACTOR\n\t\t\t) * ROUTING_SCALING_FACTOR;\n\n\t\tconst maxYElement = allElements.reduce((a, b) => {\n\t\t\treturn a.y + a.height >= b.y + b.height ? a : b;\n\t\t});\n\n\t\tconst maxY = Math.max(maxYElement.y + maxYElement.height, canvas.offsetWidth);\n\n\t\tconst width = Math.ceil(Math.abs(minX) + maxX);\n\t\tconst height = Math.ceil(Math.abs(minY) + maxY);\n\n\t\treturn {\n\t\t\twidth,\n\t\t\thAdjustmentFactor: Math.abs(minX) / ROUTING_SCALING_FACTOR + 1,\n\t\t\theight,\n\t\t\tvAdjustmentFactor: Math.abs(minY) / ROUTING_SCALING_FACTOR + 1,\n\t\t};\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * | 0 0 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all walkable points are marked by zeros.\n\t * It uses @link{#ROUTING_SCALING_FACTOR} to reduce the matrix dimensions and improve performance.\n\t */\n\tgetCanvasMatrix(): number[][] {\n\t\tif (this.canvasMatrix.length === 0) {\n\t\t\tthis.calculateCanvasMatrix();\n\t\t}\n\n\t\treturn this.canvasMatrix;\n\t}\n\n\t/**\n\t * The routing matrix does not have negative indexes, but elements could be negatively positioned.\n\t * We use the functions below to translate back and forth between these coordinates, relying on the\n\t * calculated values of hAdjustmentFactor and vAdjustmentFactor.\n\t */\n\ttranslateRoutingX(x: number, reverse: boolean = false) {\n\t\treturn x + this.hAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\ttranslateRoutingY(y: number, reverse: boolean = false) {\n\t\treturn y + this.vAdjustmentFactor * (reverse ? -1 : 1);\n\t}\n\n\t/**\n\t * A representation of the canvas in the following format:\n\t *\n\t * +-----------------+\n\t * | 0 0 1 1 0 0 0 0 |\n\t * | 0 0 1 1 0 0 1 1 |\n\t * | 0 0 0 0 0 0 1 1 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * | 1 1 0 0 0 0 0 0 |\n\t * +-----------------+\n\t *\n\t * In which all points blocked by a node (and its ports) are\n\t * marked as 1; points were there is nothing (ie, free) receive 0.\n\t */\n\tgetRoutingMatrix(): number[][] {\n\t\tif (this.routingMatrix.length === 0) {\n\t\t\tthis.calculateRoutingMatrix();\n\t\t}\n\n\t\treturn this.routingMatrix;\n\t}\n\n\tcalculateRoutingMatrix(): void {\n\t\tconst matrix = this.getCanvasMatrix().map(item => item.slice(0));\n\n\t\t// nodes need to be marked as blocked points\n\t\tthis.markNodes(matrix);\n\n\t\t// same thing for ports\n\t\tthis.markPorts(matrix);\n\n\t\tthis.routingMatrix = matrix;\n\t}\n\n\tgetSmartRouting() {\n\t\treturn !!this.smartRouting;\n\t}\n\n\t/**\n\t * Updates (by reference) where nodes will be drawn on the matrix passed in.\n\t */\n\tmarkNodes(matrix: number[][]): void {\n\t\tObject.values(this.diagramModel.getNodes()).forEach(node => {\n\t\t\tconst startX = Math.floor(node.getCoords().x / ROUTING_SCALING_FACTOR);\n\t\t\tconst endX = Math.ceil((node.getCoords().x + node.getWidth()) / ROUTING_SCALING_FACTOR);\n\t\t\tconst startY = Math.floor(node.getCoords().y / ROUTING_SCALING_FACTOR);\n\t\t\tconst endY = Math.ceil((node.getCoords().y + node.getHeight()) / ROUTING_SCALING_FACTOR);\n\n\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Updates (by reference) where ports will be drawn on the matrix passed in.\n\t */\n\tmarkPorts(matrix: number[][]): void {\n\t\tconst allElements = Object.values(this.diagramModel.getLinks()).flatMap(link => [].concat(link.getSourcePort(), link.getTargetPort()));\n\t\tallElements\n\t\t\t.filter(port => port !== null)\n\t\t\t.forEach(port => {\n\t\t\t\tconst startX = Math.floor(port.x / ROUTING_SCALING_FACTOR);\n\t\t\t\tconst endX = Math.ceil((port.x + port.width) / ROUTING_SCALING_FACTOR);\n\t\t\t\tconst startY = Math.floor(port.y / ROUTING_SCALING_FACTOR);\n\t\t\t\tconst endY = Math.ceil((port.y + port.height) / ROUTING_SCALING_FACTOR);\n\n\t\t\t\tfor (let x = startX - 1; x <= endX + 1; x++) {\n\t\t\t\t\tfor (let y = startY - 1; y < endY + 1; y++) {\n\t\t\t\t\t\tthis.markMatrixPoint(matrix, this.translateRoutingX(x), this.translateRoutingY(y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tmarkMatrixPoint = (matrix: number[][], x: number, y: number) => {\n\t\tif (matrix[y] !== undefined && matrix[y][x] !== undefined) {\n\t\t\tmatrix[y][x] = 1;\n\t\t}\n\t};\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AbstractFactory",
            "id": "class-AbstractFactory-1fbf5ba0184d756ebc3279be2923d5a2",
            "file": "projects/ngx-diagrams/src/lib/factories/base.factory.ts",
            "type": "class",
            "sourceCode": "import { BaseModel } from '../models/base.model';\n\nexport abstract class AbstractFactory<T extends BaseModel> {\n\tprotected _type: string;\n\n\tconstructor(type: string) {\n\t\tthis._type = type;\n\t}\n\n\tget type(): string {\n\t\treturn this._type;\n\t}\n\n\tabstract getNewInstance(initialConfig?: any): T;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "string",
                        "returnType": "string",
                        "line": 10
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractLabelFactory",
            "id": "class-AbstractLabelFactory-35a14e4ad4a2181283ee66b067baf26d",
            "file": "projects/ngx-diagrams/src/lib/factories/label.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractFactory } from './base.factory';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { LabelModel } from '../models/label.model';\n\nexport abstract class AbstractLabelFactory<T extends LabelModel = LabelModel> extends AbstractFactory<T> {\n\tabstract generateWidget(label: LabelModel, labelsHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractLinkFactory",
            "id": "class-AbstractLinkFactory-c7042a91d6d5b89010bf70d63b1f4a90",
            "file": "projects/ngx-diagrams/src/lib/factories/link.factory.ts",
            "type": "class",
            "sourceCode": "import { LinkModel } from '../models/link.model';\nimport { AbstractFactory } from './base.factory';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\nimport { DiagramEngine } from '../services/engine.service';\n\nexport abstract class AbstractLinkFactory<T extends LinkModel = LinkModel> extends AbstractFactory<T> {\n\tabstract generateWidget(diagramEngine: DiagramEngine, link: LinkModel, linksHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractNodeFactory",
            "id": "class-AbstractNodeFactory-b62e4c61014ed0a4c7a44f7855fde8c7",
            "file": "projects/ngx-diagrams/src/lib/factories/node.factory.ts",
            "type": "class",
            "sourceCode": "import { NodeModel } from '../models/node.model';\nimport { AbstractFactory } from './base.factory';\nimport { DiagramEngine } from '../services/engine.service';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\n\nexport abstract class AbstractNodeFactory<T extends NodeModel = NodeModel> extends AbstractFactory<T> {\n\tabstract generateWidget(diagramEngine: DiagramEngine, node: NodeModel, nodeHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AbstractPortFactory",
            "id": "class-AbstractPortFactory-ee2ed66a099dd2934f776f8547802205",
            "file": "projects/ngx-diagrams/src/lib/factories/port.factory.ts",
            "type": "class",
            "sourceCode": "import { PortModel } from '../models/port.model';\nimport { AbstractFactory } from './base.factory';\nimport { ViewContainerRef, ComponentRef } from '@angular/core';\n\nexport abstract class AbstractPortFactory<T extends PortModel = PortModel> extends AbstractFactory<T> {\n\tabstract generateWidget(port: PortModel, portHost: ViewContainerRef): ComponentRef<T>;\n}\n",
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseAction",
            "id": "class-BaseAction-7ae567d7c478a86007f1808d9a729615",
            "file": "projects/ngx-diagrams/src/lib/actions/base.action.ts",
            "type": "class",
            "sourceCode": "export class BaseAction {\n    mouseX: number;\n    mouseY: number;\n    ms: number;\n\n    constructor(mouseX: number, mouseY: number) {\n        this.mouseX = mouseX;\n        this.mouseY = mouseY;\n        this.ms = new Date().getTime();\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseEntity",
            "id": "class-BaseEntity-c0b8a5f486d4072708b162c6bff7581f",
            "file": "projects/ngx-diagrams/src/lib/base.entity.ts",
            "type": "class",
            "sourceCode": "import { ID, log as _log, withLog as _withLog, entityProperty as _entityProperty, UID, LOG_LEVEL } from './utils/tool-kit.util';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { BaseEvent, LockEvent } from './interfaces/event.interface';\n\nexport type BaseEntityType = 'node' | 'link' | 'port' | 'point';\n\nexport class BaseEntity {\n\tprivate _id: ID;\n\t/**\n\t * a prefix to make logs more easier\n\t */\n\tprivate _logPrefix: string;\n\tprivate _destroyed: Subject<null> = new Subject();\n\tprivate _destroyed$: Observable<null> = this._destroyed.asObservable();\n\tprivate _locked: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\tprivate _locked$: Observable<LockEvent> = this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t);\n\n\tconstructor(id?: ID, logPrefix = '') {\n\t\tthis._id = id || UID();\n\t\tthis._logPrefix = `${logPrefix}`;\n\t}\n\n\tpublic get id(): ID {\n\t\treturn this._id;\n\t}\n\n\tpublic set id(id: ID) {\n\t\tthis._id = id;\n\t}\n\n\tlog(message: string, ...args: any): void {\n\t\t_log(`${this._logPrefix} ${message}: `, LOG_LEVEL.LOG, ...args);\n\t}\n\n\twithLog(message: string, ...args: any): any {\n\t\treturn _withLog(`${this._logPrefix} ${message}: `, LOG_LEVEL.LOG, ...args);\n\t}\n\n\tentityPipe(logMessage: string = '') {\n\t\treturn _entityProperty(this.onEntityDestroy(), 0, `${this._logPrefix}: ${logMessage}`);\n\t}\n\n\tgetLocked(): boolean {\n\t\treturn this._locked.getValue();\n\t}\n\n\tsetLocked(locked: boolean = true) {\n\t\tthis._locked.next(locked);\n\t}\n\n\t// eslint-disable-next-line\n\tdoClone(lookupTable: { [s: string]: any } = {}, clone: any) {\n\t\t/*noop*/\n\t}\n\n\tpublic clone(lookupTable: { [s: string]: any } = {}) {\n\t\t// try and use an existing clone first\n\t\tif (lookupTable[this.id]) {\n\t\t\treturn lookupTable[this.id];\n\t\t}\n\t\tconst clone = { ...this };\n\t\tclone.id = UID();\n\t\t// clone.clearListeners();\n\t\tlookupTable[this.id] = clone;\n\n\t\tthis.doClone(lookupTable, clone);\n\t\treturn clone;\n\t}\n\n\tpublic serialize() {\n\t\treturn {\n\t\t\tid: this.id,\n\t\t\tlocked: this.getLocked(),\n\t\t};\n\t}\n\n\tpublic lockChanges(): Observable<LockEvent> {\n\t\treturn this._locked$;\n\t}\n\n\tpublic destroy() {\n\t\tthis.log('entity destroyed');\n\t\tthis._destroyed.next();\n\t\tthis._destroyed.complete();\n\t}\n\n\tpublic onEntityDestroy(): Observable<BaseEvent<BaseEntity>> {\n\t\treturn this._destroyed$.pipe(map(opts => new BaseEvent(this, opts)));\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "ID",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "''"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "ID",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "args": [
                            {
                                "name": "id",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 31,
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "id",
                        "type": "",
                        "returnType": "ID",
                        "line": 27
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseEvent",
            "id": "class-BaseEvent-a1b25ab2b6c79a87bcb302a83d8d1347",
            "file": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { ID, UID } from '../utils/tool-kit.util';\nimport { BaseEntity } from '../base.entity';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n\tentity: T;\n\tentityId: ID;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: ID;\n\tpropogate: boolean;\n\n\tconstructor(entity: T, options?: any) {\n\t\tthis.id = UID();\n\t\tthis.entity = entity;\n\t\tthis.entityId = entity.id;\n\t\tthis.firing = true;\n\t\tthis.stopPropagation = () => (this.firing = false);\n\t\tthis.propogate = options ? options.propagate : null;\n\t}\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tlocked: boolean;\n\n\tconstructor(entity: T, locked: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.locked = locked;\n\t}\n}\nexport class ParentChangeEvent<P extends BaseEntity = BaseEntity, T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tparent: P;\n\n\tconstructor(entity: T, parent: P) {\n\t\tsuper(entity);\n\t\tthis.parent = parent;\n\t}\n}\nexport class SelectionEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisSelected: boolean;\n\n\tconstructor(entity: T, selected: boolean) {\n\t\tsuper(entity);\n\t\tthis.isSelected = selected;\n\t}\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisPainted: boolean;\n\n\tconstructor(entity: T, painted: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.isPainted = painted;\n\t}\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "options",
                        "type": "any",
                        "optional": true
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "any",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseModel",
            "id": "class-BaseModel-36e2af6238813c41f805beda6a24a9ff",
            "file": "projects/ngx-diagrams/src/lib/models/base.model.ts",
            "type": "class",
            "sourceCode": "import { BaseEntity } from '../base.entity';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { PaintedEvent, ParentChangeEvent, SelectionEvent } from '../interfaces/event.interface';\n\nexport class BaseModel<X extends BaseEntity = BaseEntity> extends BaseEntity {\n\tprivate readonly _type: string;\n\tprivate readonly _parent$: BehaviorSubject<X> = new BehaviorSubject(null);\n\tprivate readonly _selected$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\tprivate readonly _painted$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\tprivate readonly _hovered$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n\tprivate readonly parent$: Observable<ParentChangeEvent<X>> = this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t);\n\tprivate readonly selected$: Observable<SelectionEvent>;\n\tprivate readonly painted$: Observable<PaintedEvent>;\n\tprivate readonly hovered$: Observable<boolean>;\n\n\tconstructor(type?: string, id?: string, logPrefix = '[Base]') {\n\t\tsuper(id, logPrefix);\n\t\tthis._type = type;\n\t\tthis.selected$ = this._selected$.pipe(\n\t\t\tthis.entityPipe('SelectedChange'),\n\t\t\tmap(s => new SelectionEvent(this, s))\n\t\t);\n\n\t\tthis.painted$ = this._painted$.pipe(\n\t\t\tthis.entityPipe('PaintedChange'),\n\t\t\tmap(p => new PaintedEvent(this, p))\n\t\t);\n\n\t\tthis.hovered$ = this._hovered$.pipe(this.entityPipe('HoveredChange'));\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\ttype: this.getType(),\n\t\t};\n\t}\n\n\tgetParent(): X {\n\t\treturn this._parent$.getValue();\n\t}\n\n\tsetParent(parent: X): void {\n\t\tthis._parent$.next(parent);\n\t}\n\n\tparentChanges(): Observable<ParentChangeEvent<X>> {\n\t\treturn this.parent$;\n\t}\n\n\tgetPainted(): boolean {\n\t\treturn this._painted$.getValue();\n\t}\n\n\tsetPainted(painted: boolean = true) {\n\t\tthis._painted$.next(painted);\n\t}\n\n\tgetHovered(): boolean {\n\t\treturn this._hovered$.getValue();\n\t}\n\n\tsetHovered(painted: boolean = true) {\n\t\tthis._hovered$.next(painted);\n\t}\n\n\tselectHovered() {\n\t\treturn this.hovered$;\n\t}\n\n\tpaintChanges(): Observable<PaintedEvent> {\n\t\treturn this.painted$;\n\t}\n\n\tgetType(): string {\n\t\treturn this._type;\n\t}\n\n\tgetSelected(): boolean {\n\t\treturn this._selected$.getValue();\n\t}\n\n\tselectSelected(): Observable<boolean> {\n\t\treturn this.selected$.pipe(map(e => e.isSelected));\n\t}\n\n\tsetSelected(selected: boolean = true) {\n\t\tthis._selected$.next(selected);\n\t}\n\n\tselectionChanges(): Observable<SelectionEvent> {\n\t\treturn this.selected$;\n\t}\n\n\tgetSelectedEntities(): BaseModel[] {\n\t\treturn this._selected$.value ? [this] : [];\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Base]'"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Base]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseEntity",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLabelFactory",
            "id": "class-DefaultLabelFactory-e309a74b4af700bf725d5227254a8e5b",
            "file": "projects/ngx-diagrams/src/lib/defaults/factories/default-label.factory.ts",
            "type": "class",
            "sourceCode": "import { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\nimport { AbstractLabelFactory } from '../../factories/label.factory';\nimport { DefaultLabelComponent } from '../components/default-label/default-label.component';\nimport { DefaultLabelModel } from '../models/default-label.model';\n\nexport class DefaultLabelFactory extends AbstractLabelFactory<DefaultLabelModel> {\n\tconstructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n\t\tsuper('default');\n\t}\n\n\tgenerateWidget(label: DefaultLabelComponent, labelHost: ViewContainerRef): ComponentRef<DefaultLabelComponent> {\n\t\tconst componentRef = labelHost.createComponent(this.getRecipe());\n\n\t\t// attach coordinates and default positional behaviour to the generated component host\n\t\tconst rootNode = componentRef.location.nativeElement;\n\n\t\t// default style for link\n\t\tthis.renderer.setStyle(rootNode, 'position', 'absolute');\n\n\t\t// data attributes\n\t\tthis.renderer.setAttribute(rootNode, 'data-labelid', label.id);\n\n\t\t// on destroy make sure to destroy the componentRef\n\t\tlabel.onEntityDestroy().subscribe(() => {\n\t\t\tcomponentRef.destroy();\n\t\t});\n\n\t\t// assign all passed properties to node initialization.\n\t\tObject.entries(label).forEach(([key, value]) => {\n\t\t\tcomponentRef.instance[key] = value;\n\t\t});\n\n\t\tcomponentRef.instance.setPainted(true);\n\t\treturn componentRef;\n\t}\n\n\tgetRecipe(): ComponentFactory<DefaultLabelComponent> {\n\t\treturn this.resolver.resolveComponentFactory(DefaultLabelComponent);\n\t}\n\n\tgetNewInstance() {\n\t\treturn new DefaultLabelModel();\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "DefaultLabelComponent"
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "DefaultLabelComponent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLabelComponent>",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "labelsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLabelFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLabelFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLabelModel",
            "id": "class-DefaultLabelModel-9d17bd0471a08f887376f7e342fefe31",
            "file": "projects/ngx-diagrams/src/lib/defaults/models/default-label.model.ts",
            "type": "class",
            "sourceCode": "import { LabelModel } from '../../models/label.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport class DefaultLabelModel extends LabelModel {\n\tprivate _label: BehaviorSubject<string> = new BehaviorSubject('');\n\tlabel$: Observable<string> = this._label.pipe(this.entityPipe('label'));\n\n\tconstructor(label: string = 'NO LABEL', type: string = 'default', id?: string, logPrefix: string = '[DefaultLabel]') {\n\t\tsuper(type, id, logPrefix);\n\t\tthis.setLabel(label);\n\t}\n\n\tsetLabel(label: string) {\n\t\tthis._label.next(label);\n\t}\n\n\tgetLabel(): string {\n\t\treturn this._label.getValue();\n\t}\n\n\tselectLabel(): Observable<string> {\n\t\treturn this.label$;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "label",
                        "type": "string",
                        "defaultValue": "'NO LABEL'"
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "defaultValue": "'default'"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[DefaultLabel]'"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "label",
                        "type": "string",
                        "defaultValue": "'NO LABEL'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "defaultValue": "'default'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[DefaultLabel]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_label",
                    "defaultValue": "new BehaviorSubject('')",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "label$",
                    "defaultValue": "this._label.pipe(this.entityPipe('label'))",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "_coords",
                    "defaultValue": "new BehaviorSubject<Coords>({ x: 0, y: 0 })",
                    "type": "BehaviorSubject<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_rotation",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "this._coords.pipe(this.entityPipe('coords'))",
                    "type": "Observable<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "rotation$",
                    "defaultValue": "this._rotation.pipe(this.entityPipe('rotation'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 43,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLabelModel",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setRotation",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "LabelModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLinkFactory",
            "id": "class-DefaultLinkFactory-e90ff1be4b8218e18b40c3faf18dfb8b",
            "file": "projects/ngx-diagrams/src/lib/defaults/factories/default-link.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractLinkFactory } from '../../factories/link.factory';\nimport { DefaultLinkComponent } from '../components/default-link/default-link.component';\nimport { DefaultLinkModel } from '../models/default-link.model';\nimport { ViewContainerRef, ComponentRef, ComponentFactoryResolver, ComponentFactory, Renderer2 } from '@angular/core';\nimport { DiagramEngine } from '../../services/engine.service';\n\nexport class DefaultLinkFactory extends AbstractLinkFactory<DefaultLinkModel> {\n\tconstructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n\t\tsuper('default');\n\t}\n\n\tgenerateWidget(diagramEngine: DiagramEngine, link: DefaultLinkModel, linksHost: ViewContainerRef): ComponentRef<DefaultLinkComponent> {\n\t\tconst componentRef = linksHost.createComponent(this.getRecipe());\n\n\t\t// attach coordinates and default positional behaviour to the generated component host\n\t\tconst rootNode = componentRef.location.nativeElement;\n\n\t\t// default style for link\n\t\tthis.renderer.setStyle(rootNode, 'position', 'absolute');\n\t\tthis.renderer.addClass(rootNode, 'label');\n\n\t\t// data attributes\n\t\tthis.renderer.setAttribute(rootNode, 'data-linkid', link.id);\n\n\t\t// on destroy make sure to destroy the componentRef\n\t\tlink.onEntityDestroy().subscribe(() => {\n\t\t\tcomponentRef.destroy();\n\t\t});\n\n\t\t// assign all passed properties to link initialization.\n\t\tObject.entries(link).forEach(([key, value]) => {\n\t\t\tcomponentRef.instance[key] = value;\n\t\t});\n\n\t\tcomponentRef.instance.diagramEngine = diagramEngine;\n\t\tcomponentRef.instance.setPainted(true);\n\t\treturn componentRef;\n\t}\n\n\tgetRecipe(): ComponentFactory<DefaultLinkComponent> {\n\t\treturn this.resolver.resolveComponentFactory(DefaultLinkComponent);\n\t}\n\n\tgetNewInstance() {\n\t\treturn new DefaultLinkModel();\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "DefaultLinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultLinkComponent>",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "link",
                            "type": "LinkModel"
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linksHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractLinkFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractLinkFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultLinkModel",
            "id": "class-DefaultLinkModel-6aead128ac2209245c52e10b9b22d7e4",
            "file": "projects/ngx-diagrams/src/lib/defaults/models/default-link.model.ts",
            "type": "class",
            "sourceCode": "import { LinkModel } from '../../models/link.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nexport class DefaultLinkModel extends LinkModel {\n\tprivate _width$: BehaviorSubject<number> = new BehaviorSubject(3);\n\tprivate _color$: BehaviorSubject<string> = new BehaviorSubject('rgba(255,255,255,0.5)');\n\tprivate _curvyness$: BehaviorSubject<number> = new BehaviorSubject(50);\n\twidth$: Observable<number> = this._width$.pipe(this.entityPipe('width'));\n\tcolor$: Observable<string> = this._color$.pipe(this.entityPipe('color'));\n\tcurvyness$: Observable<number> = this._curvyness$.pipe(this.entityPipe('curvyness'));\n\n\tconstructor({ type = 'default', id, logPrefix = '[DefaultLink]' }: { type?: string; id?: string; logPrefix?: string } = {}) {\n\t\tsuper(type, id, logPrefix);\n\t}\n\n\tsetWidth(width: number) {\n\t\tthis._width$.next(width);\n\t}\n\n\tsetColor(color: string) {\n\t\tthis._color$.next(color);\n\t}\n\n\tselectWidth(): Observable<number> {\n\t\treturn this.width$;\n\t}\n\n\tselectColor(): Observable<string> {\n\t\treturn this.color$;\n\t}\n\n\tsetCurvyness(curvyness: number) {\n\t\tthis._curvyness$.next(curvyness);\n\t}\n\n\tget color() {\n\t\treturn this._color$.getValue();\n\t}\n\n\tget width() {\n\t\treturn this._width$.getValue();\n\t}\n\n\tget curvyness() {\n\t\treturn this._curvyness$.getValue();\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_color$",
                    "defaultValue": "new BehaviorSubject('rgba(255,255,255,0.5)')",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_curvyness$",
                    "defaultValue": "new BehaviorSubject(50)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_width$",
                    "defaultValue": "new BehaviorSubject(3)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "color$",
                    "defaultValue": "this._color$.pipe(this.entityPipe('color'))",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "this._curvyness$.pipe(this.entityPipe('curvyness'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "width$",
                    "defaultValue": "this._width$.pipe(this.entityPipe('width'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "_label$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<LabelModel>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngine",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "label$",
                    "defaultValue": "this._label$.pipe(this.entityPipe('label'))",
                    "type": "Observable<LabelModel>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "points",
                    "type": "PointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "targetPort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "P"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [
                        "P"
                    ],
                    "line": 220,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "generatePoint",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getFirstPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 127,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "LabelModel",
                    "typeParameters": [],
                    "line": 187,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLastPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 131,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointIndex",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointModel",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel | null",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel[]",
                    "typeParameters": [],
                    "line": 167,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPortForPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSourcePort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 145,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getTargetPort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 149,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "isLastPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "point",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removeMiddlePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsAfter",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsBefore",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "resetLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LabelModel | null>",
                    "typeParameters": [],
                    "line": 183,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLinkModel",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "PointModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "PointModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setSourcePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setTargetPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "LinkModel",
            "accessors": {
                "color": {
                    "name": "color",
                    "getSignature": {
                        "name": "color",
                        "type": "",
                        "returnType": "",
                        "line": 36
                    }
                },
                "width": {
                    "name": "width",
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "",
                        "line": 40
                    }
                },
                "curvyness": {
                    "name": "curvyness",
                    "getSignature": {
                        "name": "curvyness",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultNodeFactory",
            "id": "class-DefaultNodeFactory-e4d52813ade86942629a55b1cb145679",
            "file": "projects/ngx-diagrams/src/lib/defaults/factories/default-node.factory.ts",
            "type": "class",
            "sourceCode": "import { DefaultNodeComponent } from '../components/default-node/default-node.component';\nimport { AbstractNodeFactory } from '../../factories/node.factory';\nimport { ComponentFactoryResolver, ViewContainerRef, ComponentRef, ComponentFactory, Renderer2 } from '@angular/core';\nimport { DiagramEngine } from '../../services/engine.service';\nimport { DefaultNodeModel } from '../models/default-node.model';\n\nexport class DefaultNodeFactory extends AbstractNodeFactory<DefaultNodeModel> {\n\tconstructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n\t\tsuper('default');\n\t}\n\n\tgenerateWidget(diagramEngine: DiagramEngine, node: DefaultNodeModel, nodesHost: ViewContainerRef): ComponentRef<DefaultNodeComponent> {\n\t\tconst componentRef = nodesHost.createComponent(this.getRecipe());\n\n\t\t// attach coordinates and default positional behaviour to the generated component host\n\t\tconst rootNode = componentRef.location.nativeElement;\n\n\t\t// default style for node\n\t\tthis.renderer.setStyle(rootNode, 'position', 'absolute');\n\t\tthis.renderer.setStyle(rootNode, 'display', 'block');\n\n\t\t// data attributes\n\t\tthis.renderer.setAttribute(rootNode, 'data-nodeid', node.id);\n\n\t\t// subscribe to node coordinates\n\t\tnode.selectCoords().subscribe(({ x, y }) => {\n\t\t\tthis.renderer.setStyle(rootNode, 'left', `${x}px`);\n\t\t\tthis.renderer.setStyle(rootNode, 'top', `${y}px`);\n\t\t});\n\n\t\tnode.selectionChanges().subscribe(e => {\n\t\t\te.isSelected ? this.renderer.addClass(rootNode, 'selected') : this.renderer.removeClass(rootNode, 'selected');\n\t\t});\n\n\t\tnode.onEntityDestroy().subscribe(() => {\n\t\t\tcomponentRef.destroy();\n\t\t});\n\n\t\t// assign all passed properties to node initialization.\n\t\tObject.entries(node).forEach(([key, value]) => {\n\t\t\tcomponentRef.instance[key] = value;\n\t\t});\n\n\t\tcomponentRef.instance.setDiagramEngine(diagramEngine);\n\t\tcomponentRef.instance.setPainted(true);\n\n\t\treturn componentRef;\n\t}\n\n\tgetRecipe(): ComponentFactory<DefaultNodeComponent> {\n\t\treturn this.resolver.resolveComponentFactory(DefaultNodeComponent);\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultNodeModel {\n\t\treturn new DefaultNodeModel(initialConfig);\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel"
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "DefaultNodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodesHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultNodeModel",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultNodeComponent>",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        },
                        {
                            "name": "node",
                            "type": "NodeModel"
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 7,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractNodeFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractNodeFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultNodeModel",
            "id": "class-DefaultNodeModel-2163cc362a44718630fbb8eb710d247c",
            "file": "projects/ngx-diagrams/src/lib/defaults/models/default-node.model.ts",
            "type": "class",
            "sourceCode": "import { NodeModel } from '../../models/node.model';\nimport { DefaultPortModel } from './default-port.model';\nimport { Observable } from 'rxjs';\n\nexport class DefaultNodeModel extends NodeModel {\n\tname: string;\n\tcolor: string;\n\theight$: Observable<number>;\n\twidth$: Observable<number>;\n\n\tconstructor({\n\t\tname = 'Untitled',\n\t\ttype = 'default',\n\t\tcolor = 'rgb(0, 192, 255)',\n\t\tid,\n\t}: {\n\t\tname?: string;\n\t\ttype?: string;\n\t\tid?: string;\n\t\tcolor?: string;\n\t} = {}) {\n\t\tsuper(type, id);\n\t\tthis.name = name;\n\t\tthis.color = color;\n\t\tthis.height$ = this.selectHeight();\n\t\tthis.width$ = this.selectWidth();\n\t}\n\n\taddInPort({ name, type = 'default', id, linkType = 'default' }: { name: string; type?: string; id?: string; linkType?: string }) {\n\t\tconst port = new DefaultPortModel({ isInput: true, name, type, id, label: null, linkType });\n\t\tthis.addPort(port);\n\t\treturn port;\n\t}\n\n\taddOutPort({\n\t\tname,\n\t\ttype = 'default',\n\t\tid,\n\t\tlinkType = 'default',\n\t\tmaximumLinks = null,\n\t}: {\n\t\tname: string;\n\t\ttype?: string;\n\t\tid?: string;\n\t\tlinkType?: string;\n\t\tmaximumLinks?: number;\n\t}) {\n\t\tconst port = new DefaultPortModel({ isInput: false, name, type, id, label: null, linkType, maximumLinks });\n\t\tthis.addPort(port);\n\t\treturn port;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "_coords$",
                    "defaultValue": "new BehaviorSubject<Coords>({ x: 0, y: 0 })",
                    "type": "BehaviorSubject<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_diagramEngine$",
                    "defaultValue": "new BehaviorSubject<DiagramEngine>(null)",
                    "type": "BehaviorSubject<DiagramEngine>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_dimensions$",
                    "defaultValue": "new BehaviorSubject<Dimensions>({ width: 0, height: 0 })",
                    "type": "BehaviorSubject<Dimensions>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_extras$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_ports$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "this._coords$.pipe(this.entityPipe('coords'))",
                    "type": "Observable<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "diagramEngine$",
                    "defaultValue": "this._diagramEngine$.pipe(this.entityPipe('diagramEngine'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensions$",
                    "defaultValue": "this._dimensions$.pipe(this.entityPipe('dimensions'))",
                    "type": "Observable<Dimensions>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "extras$",
                    "defaultValue": "this._extras$.pipe(this.entityPipe('extras'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "ports$",
                    "defaultValue": "this._ports$.pipe(this.entityPipe('ports'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 125,
                    "description": "<p>Assign a port to the node and set the node as its getParent</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3992,
                                "end": 3999,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the inserted port</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "coordsChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 105,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Dimensions>",
                    "typeParameters": [],
                    "line": 168,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 53,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "Dimensions",
                    "typeParameters": [],
                    "line": 163,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 206,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 172,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPort",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPorts",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 180,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 109,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectExtras",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 195,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectPorts",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<P[]>",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 188,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 113,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 117,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedNodeModel",
                    "typeParameters": [],
                    "line": 71,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDiagramEngine",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDimensions",
                    "args": [
                        {
                            "type": "Dimensions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "type": "Dimensions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "NodeModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultPortFactory",
            "id": "class-DefaultPortFactory-fa373a5bb0c9f4c1728183bb7d963a9c",
            "file": "projects/ngx-diagrams/src/lib/defaults/factories/default-port.factory.ts",
            "type": "class",
            "sourceCode": "import { AbstractPortFactory } from '../../factories/port.factory';\nimport { DefaultPortModel } from '../models/default-port.model';\nimport { ViewContainerRef, ComponentRef, ComponentFactory, ComponentFactoryResolver, Renderer2 } from '@angular/core';\nimport { DefaultPortComponent } from '../components/default-port/default-port.component';\n\nexport class DefaultPortFactory extends AbstractPortFactory<DefaultPortModel> {\n\tconstructor(private resolver: ComponentFactoryResolver, private renderer: Renderer2) {\n\t\tsuper('default');\n\t}\n\n\tgenerateWidget(port: DefaultPortModel, portsHost: ViewContainerRef): ComponentRef<DefaultPortComponent> {\n\t\tconst componentRef = portsHost.createComponent(this.getRecipe());\n\n\t\t// attach coordinates and default positional behaviour to the generated component host\n\t\tconst rootNode = componentRef.location.nativeElement as HTMLElement;\n\n\t\t// data attributes\n\t\tthis.renderer.setAttribute(rootNode, 'data-portid', port.id);\n\t\tthis.renderer.setAttribute(rootNode, 'data-name', port.getName());\n\n\t\tport.in ? this.renderer.addClass(rootNode, 'in') : this.renderer.addClass(rootNode, 'out');\n\n\t\t// assign all passed properties to node initialization.\n\t\tObject.entries(port).forEach(([key, value]) => {\n\t\t\tcomponentRef.instance[key] = value;\n\t\t});\n\n\t\tport.onEntityDestroy().subscribe(() => {\n\t\t\tcomponentRef.destroy();\n\t\t});\n\n\t\tcomponentRef.instance.setPainted(true);\n\t\treturn componentRef;\n\t}\n\n\tgetRecipe(): ComponentFactory<DefaultPortComponent> {\n\t\treturn this.resolver.resolveComponentFactory(DefaultPortComponent);\n\t}\n\n\tgetNewInstance(initialConfig?: any): DefaultPortModel {\n\t\treturn new DefaultPortModel({ isInput: true, name: 'unknown', ...initialConfig });\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        113
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "methods": [
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portsHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "DefaultPortModel",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "ComponentFactory<DefaultPortComponent>",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "generateWidget",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef"
                        }
                    ],
                    "optional": false,
                    "returnType": "ComponentRef<T>",
                    "typeParameters": [],
                    "line": 6,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "portHost",
                            "type": "ViewContainerRef",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractPortFactory"
                    }
                },
                {
                    "name": "getNewInstance",
                    "args": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 14,
                    "modifierKind": [
                        117
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialConfig",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AbstractFactory"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "AbstractPortFactory",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DefaultPortModel",
            "id": "class-DefaultPortModel-1a4ddbc0af8ef42ab1b542533b561f80",
            "file": "projects/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
            "type": "class",
            "sourceCode": "import { PortModel } from '../../models/port.model';\nimport { LinkModel } from '../../models/link.model';\nimport { DefaultLinkModel } from './default-link.model';\n\nexport interface DefaultPortModelConfig {\n\tid?: string;\n\tisInput?: boolean;\n\tname?: string;\n\ttype?: string;\n\tlabel?: string;\n\tlinkType?: string;\n\tmaximumLinks?: number;\n}\n\nexport class DefaultPortModel extends PortModel {\n\tin: boolean;\n\tlabel: string;\n\tlinks: { [id: string]: any };\n\n\tconstructor({\n\t\tisInput = true,\n\t\tname = 'port',\n\t\ttype = 'default',\n\t\tid = null,\n\t\tlabel = null,\n\t\tlinkType = 'default',\n\t\tmaximumLinks = null,\n\t}: DefaultPortModelConfig = {}) {\n\t\tsuper(name, type, id, null, linkType);\n\t\tthis.in = isInput;\n\t\tthis.label = label || name;\n\n\t\tif (this.in) {\n\t\t\tthis.setCanCreateLinks(false);\n\t\t} else {\n\t\t\tthis.setMaximumLinks(maximumLinks);\n\t\t\tthis.setMagnetic(false);\n\t\t}\n\t}\n\n\tlink(port: PortModel): LinkModel {\n\t\tif (super.getCanCreateLinks()) {\n\t\t\tconst link = new DefaultLinkModel({ type: this.getLinkType() });\n\t\t\tlink.setSourcePort(this);\n\t\t\tlink.setTargetPort(port);\n\t\t\treturn link;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tcreateLinkModel() {\n\t\tif (super.getCanCreateLinks()) {\n\t\t\treturn new DefaultLinkModel({ type: this.getLinkType() });\n\t\t}\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\tif (port instanceof DefaultPortModel) {\n\t\t\treturn this.in !== port.in;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "type": "DefaultPortModelConfig",
                        "defaultValue": "{}"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "type": "DefaultPortModelConfig",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "links",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "_canCreateLinks$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_height$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_links$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_magnetic$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_width$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_x$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_y$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "links$",
                    "defaultValue": "this._links$.pipe(\n\t\ttakeUntil(this.onEntityDestroy()),\n\t\tdistinctUntilChanged(),\n\t\tshareReplay(1)\n\t)",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "magnetic$",
                    "defaultValue": "this._magnetic$.pipe(this.entityPipe('magnetic'))",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "x$",
                    "defaultValue": "this._x$.pipe(this.entityPipe('x'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "y$",
                    "defaultValue": "this._y$.pipe(this.entityPipe('y'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 168,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 79,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 153,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinkType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMaximumLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 127,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getNode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getX",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getY",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "isLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "removeLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 157,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 103,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 107,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setCanCreateLinks",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLinkType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMagnetic",
                    "args": [
                        {
                            "name": "magnetic",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "magnetic",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMaximumLinks",
                    "args": [
                        {
                            "name": "maximumLinks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "maximumLinks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "updateCoords",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "PortModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DiagramModel",
            "id": "class-DiagramModel-d38a20ea2839780ecf0be3808be32357",
            "file": "projects/ngx-diagrams/src/lib/models/diagram.model.ts",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\nimport { NodeModel } from './node.model';\nimport { LinkModel } from './link.model';\nimport { BaseEntity, BaseEntityType } from '../base.entity';\nimport { DiagramEngine } from '../services/engine.service';\nimport { BaseModel } from './base.model';\nimport { PortModel } from './port.model';\nimport { PointModel } from './point.model';\nimport { Coords } from '../interfaces/coords.interface';\nimport { ID } from '../utils/tool-kit.util';\nimport { SelectOptions } from '../interfaces/select-options.interface';\nimport { SerializedDiagramModel } from '../interfaces/serialization.interface';\n\nexport class DiagramModel extends BaseEntity {\n\tprivate _links$: BehaviorSubject<{ [s: string]: LinkModel }> = new BehaviorSubject<{ [s: string]: LinkModel }>({});\n\tprivate _nodes$: BehaviorSubject<{ [s: string]: NodeModel }> = new BehaviorSubject<{ [s: string]: NodeModel }>({});\n\tprivate _zoom$: BehaviorSubject<number> = new BehaviorSubject(100);\n\tprivate _offsetX$: BehaviorSubject<number> = new BehaviorSubject(0);\n\tprivate _offsetY$: BehaviorSubject<number> = new BehaviorSubject(0);\n\tprivate _gridSize$: BehaviorSubject<number> = new BehaviorSubject(0);\n\tprivate _maxZoomOut$: BehaviorSubject<number> = new BehaviorSubject(null);\n\tprivate _maxZoomIn$: BehaviorSubject<number> = new BehaviorSubject(null);\n\n\tprivate nodes$: Observable<{ [s: string]: NodeModel }> = this._nodes$.pipe(this.entityPipe('nodes'));\n\n\tprivate links$: Observable<{ [s: string]: LinkModel }> = this._links$.pipe(this.entityPipe('links'));\n\n\tprivate offsetX$: Observable<number> = this._offsetX$.pipe(this.entityPipe('offsetX'));\n\tprivate offsetY$: Observable<number> = this._offsetY$.pipe(this.entityPipe('offsetY'));\n\tprivate zoom$: Observable<number> = this._zoom$.pipe(this.entityPipe('zoom'));\n\n\tconstructor(private diagramEngine: DiagramEngine, id?: string, logPrefix: string = '[Diagram]') {\n\t\tsuper(id, logPrefix);\n\t}\n\n\t// TODO: support the following events for links and nodes\n\t// removed, updated<positionChanged/dataChanged>, added\n\tgetNodes(): { [s: string]: NodeModel } {\n\t\treturn this._nodes$.getValue();\n\t}\n\n\tgetNode(id: ID): NodeModel | null {\n\t\treturn this._nodes$.getValue()[id];\n\t}\n\n\tgetLink(id: ID): LinkModel | null {\n\t\treturn this._links$.getValue()[id];\n\t}\n\n\tgetLinks(): { [s: string]: LinkModel } {\n\t\treturn this._links$.getValue();\n\t}\n\n\tgetAllPorts(options?: SelectOptions<PortModel>): Map<string, PortModel> {\n\t\tconst portsMap = new Map();\n\t\t// TODO: optimize!\n\t\tObject.values(this.getNodes()).forEach(node => {\n\t\t\tfor (const [key, port] of Object.entries(node.getPorts())) {\n\t\t\t\tif (options.filter) {\n\t\t\t\t\tif (options.filter(port as PortModel)) {\n\t\t\t\t\t\tportsMap.set(key, port);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tportsMap.set(key, port);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn portsMap;\n\t}\n\n\t/**\n\t * Add a node to the diagram\n\t * @returns Inserted Node\n\t */\n\taddNode(node: NodeModel): NodeModel {\n\t\tthis._nodes$.next({ ...this._nodes$.value, [node.id]: node });\n\t\treturn node;\n\t}\n\n\t/**\n\t * Delete a node from the diagram\n\t */\n\tdeleteNode(nodeOrId: NodeModel | string): void {\n\t\tconst nodeID: ID = typeof nodeOrId === 'string' ? nodeOrId : nodeOrId.id;\n\t\tconst node = this.getNode(nodeID);\n\n\t\t// delete all related links\n\t\tObject.values(node.getPorts()).forEach((port: PortModel) => {\n\t\t\tObject.values(port.getLinks()).forEach(link => {\n\t\t\t\tthis.deleteLink(link);\n\t\t\t});\n\t\t});\n\n\t\tconst updNodes = { ...this.getNodes() };\n\t\tdelete updNodes[nodeID];\n\t\tthis._nodes$.next(updNodes);\n\n\t\tnode.destroy();\n\t}\n\n\t/**\n\t * Get nodes as observable, use `.getValue()` for snapshot\n\t */\n\tselectNodes(): Observable<{ [s: string]: NodeModel }> {\n\t\treturn this.nodes$;\n\t}\n\n\t/**\n\t * Add link\n\t * @returns Newly created link\n\t */\n\taddLink(link: LinkModel): LinkModel {\n\t\tthis._links$.next({ ...this.getLinks(), [link.id]: link });\n\t\treturn link;\n\t}\n\n\t/**\n\t * Delete link\n\t */\n\tdeleteLink(linkOrId: LinkModel | string) {\n\t\tconst linkID: ID = typeof linkOrId === 'string' ? linkOrId : linkOrId.id;\n\t\tconst link = this.getLink(linkID);\n\n\t\tconst updLinks = { ...this.getLinks() };\n\t\tdelete updLinks[linkID];\n\n\t\tthis._links$.next(updLinks);\n\t\tlink.destroy();\n\t}\n\n\treset() {\n\t\tObject.values(this.getNodes()).forEach(node => {\n\t\t\tthis.deleteNode(node);\n\t\t});\n\t}\n\n\t/**\n\t * Get links behaviour subject, use `.getValue()` for snapshot\n\t */\n\tselectLinks(): Observable<{ [s: string]: LinkModel }> {\n\t\treturn this.links$;\n\t}\n\n\t// /**\n\t//  * Serialize the diagram model to JSON\n\t//  * @returns diagram model as a string\n\t//  */\n\tserialize(): SerializedDiagramModel {\n\t\tconst serializedNodes = Object.values(this.getNodes()).map(node => node.serialize());\n\t\tconst serializedLinks = Object.values(this.getLinks()).map(link => link.serialize());\n\t\treturn { ...super.serialize(), nodes: serializedNodes, links: serializedLinks };\n\t}\n\n\tsetMaxZoomOut(maxZoomOut: number) {\n\t\tthis._maxZoomOut$.next(maxZoomOut);\n\t}\n\n\tsetMaxZoomIn(maxZoomIn: number) {\n\t\tthis._maxZoomIn$.next(maxZoomIn);\n\t}\n\n\tgetMaxZoomOut() {\n\t\treturn this._maxZoomOut$.getValue();\n\t}\n\n\tgetMaxZoomIn() {\n\t\treturn this._maxZoomIn$.getValue();\n\t}\n\n\tsetOffset(x: number, y: number) {\n\t\tthis._offsetX$.next(x);\n\t\tthis._offsetY$.next(y);\n\t}\n\n\tsetOffsetX(x: number) {\n\t\tthis._offsetX$.next(x);\n\t}\n\n\tgetOffsetX(): number {\n\t\treturn this._offsetX$.getValue();\n\t}\n\n\tselectOffsetX(): Observable<number> {\n\t\treturn this.offsetX$;\n\t}\n\n\tsetOffsetY(y: number) {\n\t\tthis._offsetY$.next(y);\n\t}\n\n\tgetOffsetY(): number {\n\t\treturn this._offsetY$.getValue();\n\t}\n\n\tselectOffsetY(): Observable<number> {\n\t\treturn this.offsetY$;\n\t}\n\n\tsetZoomLevel(z: number) {\n\t\tconst maxZoomIn = this._maxZoomIn$.getValue();\n\t\tconst maxZoomOut = this._maxZoomOut$.getValue();\n\n\t\t// check if zoom levels exceeded defined boundaries\n\t\tif ((maxZoomIn && z > maxZoomIn) || (maxZoomOut && z < maxZoomOut)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._zoom$.next(z);\n\t}\n\n\tgetZoomLevel(): number {\n\t\treturn this._zoom$.getValue();\n\t}\n\n\tselectZoomLevel(): Observable<number> {\n\t\treturn this.zoom$;\n\t}\n\n\tgetDiagramEngine(): DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n\n\tclearSelection(ignore: BaseModel | null = null) {\n\t\tthis.getSelectedItems().forEach(element => {\n\t\t\tif (ignore && ignore.id === element.id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telement.setSelected(false);\n\t\t});\n\t}\n\n\tgetGridPosition({ x, y }: Coords): Coords {\n\t\tconst gridSize = this._gridSize$.getValue();\n\t\tif (gridSize === 0) {\n\t\t\treturn { x, y };\n\t\t}\n\t\treturn {\n\t\t\tx: gridSize * Math.floor((x + gridSize / 2) / gridSize),\n\t\t\ty: gridSize * Math.floor((y + gridSize / 2) / gridSize),\n\t\t};\n\t}\n\n\tgetSelectedItems(...filters: BaseEntityType[]): BaseModel[] {\n\t\tif (!Array.isArray(filters)) {\n\t\t\tfilters = [filters];\n\t\t}\n\t\tlet items: BaseModel[] = [];\n\n\t\t// run through nodes\n\t\titems = items.concat(Object.values(this.getNodes()).flatMap(node => node.getSelectedEntities()));\n\n\t\t// find all the links\n\t\titems = items.concat(Object.values(this.getLinks()).flatMap(link => link.getSelectedEntities()));\n\n\t\t// find all points\n\t\titems = items.concat(\n\t\t\tObject.values(this.getLinks()).flatMap(link => {\n\t\t\t\treturn link.getPoints().flatMap(point => point.getSelectedEntities());\n\t\t\t})\n\t\t);\n\n\t\titems = [...new Set(items)];\n\n\t\tif (filters.length > 0) {\n\t\t\titems = items.filter((item: BaseModel) => {\n\t\t\t\tif (filters.includes('node') && item instanceof NodeModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (filters.includes('link') && item instanceof LinkModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (filters.includes('port') && item instanceof PortModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (filters.includes('point') && item instanceof PointModel) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\treturn items;\n\t}\n\n\taddAll(...models: BaseModel[]) {\n\t\tmodels.forEach(model => {\n\t\t\tif (model instanceof LinkModel) {\n\t\t\t\tthis.addLink(model);\n\t\t\t} else if (model instanceof NodeModel) {\n\t\t\t\tthis.addNode(model);\n\t\t\t}\n\t\t});\n\t\treturn models;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Diagram]'"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Diagram]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_gridSize$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_links$",
                    "defaultValue": "new BehaviorSubject<{ [s: string]: LinkModel }>({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_maxZoomIn$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_maxZoomOut$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_nodes$",
                    "defaultValue": "new BehaviorSubject<{ [s: string]: NodeModel }>({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_offsetX$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_offsetY$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_zoom$",
                    "defaultValue": "new BehaviorSubject(100)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "links$",
                    "defaultValue": "this._links$.pipe(this.entityPipe('links'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "nodes$",
                    "defaultValue": "this._nodes$.pipe(this.entityPipe('nodes'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "offsetX$",
                    "defaultValue": "this._offsetX$.pipe(this.entityPipe('offsetX'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "offsetY$",
                    "defaultValue": "this._offsetY$.pipe(this.entityPipe('offsetY'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "zoom$",
                    "defaultValue": "this._zoom$.pipe(this.entityPipe('zoom'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addAll",
                    "args": [
                        {
                            "name": "models",
                            "type": "BaseModel[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 285,
                    "jsdoctags": [
                        {
                            "name": "models",
                            "type": "BaseModel[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 112,
                    "description": "<p>Add link</p>\n",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3701,
                                "end": 3708,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Newly created link</p>\n"
                        }
                    ]
                },
                {
                    "name": "addNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "NodeModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 75,
                    "description": "<p>Add a node to the diagram</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "NodeModel",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 2855,
                                "end": 2862,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Inserted Node</p>\n"
                        }
                    ]
                },
                {
                    "name": "clearSelection",
                    "args": [
                        {
                            "name": "ignore",
                            "type": "BaseModel | null",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "jsdoctags": [
                        {
                            "name": "ignore",
                            "type": "BaseModel | null",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteLink",
                    "args": [
                        {
                            "name": "linkOrId",
                            "type": "LinkModel | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "description": "<p>Delete link</p>\n",
                    "jsdoctags": [
                        {
                            "name": "linkOrId",
                            "type": "LinkModel | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteNode",
                    "args": [
                        {
                            "name": "nodeOrId",
                            "type": "NodeModel | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "description": "<p>Delete a node from the diagram</p>\n",
                    "jsdoctags": [
                        {
                            "name": "nodeOrId",
                            "type": "NodeModel | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllPorts",
                    "args": [
                        {
                            "name": "options",
                            "type": "SelectOptions<PortModel>",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<string, PortModel>",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "SelectOptions<PortModel>",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "DiagramEngine",
                    "typeParameters": [],
                    "line": 219
                },
                {
                    "name": "getGridPosition",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 232,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLink",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel | null",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "getMaxZoomIn",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 166
                },
                {
                    "name": "getMaxZoomOut",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "getNode",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "NodeModel | null",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "getOffsetX",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 179
                },
                {
                    "name": "getOffsetY",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 191
                },
                {
                    "name": "getSelectedItems",
                    "args": [
                        {
                            "name": "filters",
                            "type": "BaseEntityType[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 243,
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "BaseEntityType[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getZoomLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 211
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 140,
                    "description": "<p>Get links behaviour subject, use <code>.getValue()</code> for snapshot</p>\n"
                },
                {
                    "name": "selectNodes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 104,
                    "description": "<p>Get nodes as observable, use <code>.getValue()</code> for snapshot</p>\n"
                },
                {
                    "name": "selectOffsetX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "selectOffsetY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 195
                },
                {
                    "name": "selectZoomLevel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 215
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedDiagramModel",
                    "typeParameters": [],
                    "line": 148
                },
                {
                    "name": "setMaxZoomIn",
                    "args": [
                        {
                            "name": "maxZoomIn",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "maxZoomIn",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMaxZoomOut",
                    "args": [
                        {
                            "name": "maxZoomOut",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "maxZoomOut",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOffset",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        },
                        {
                            "name": "y",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOffsetX",
                    "args": [
                        {
                            "name": "x",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setOffsetY",
                    "args": [
                        {
                            "name": "y",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "jsdoctags": [
                        {
                            "name": "y",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setZoomLevel",
                    "args": [
                        {
                            "name": "z",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "jsdoctags": [
                        {
                            "name": "z",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseEntity",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "InvalidLinkDestroyed",
            "id": "class-InvalidLinkDestroyed-1e81ccd558aa62e9e195743d67d0d282",
            "file": "projects/ngx-diagrams/src/lib/actions/invalid-link-destroyed.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PortModel } from '../models/port.model';\nimport { NodeModel } from '../models/node.model';\nimport { LinkModel } from '../models';\n\nexport class InvalidLinkDestroyed extends BaseAction {\n\tsourcePort: PortModel;\n\tlink: LinkModel;\n\n\tconstructor(mouseX: number, mouseY: number, link: LinkModel) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.sourcePort = link.getSourcePort();\n\t\tthis.link = link;\n\t}\n\n\tgetOutPortNode(): NodeModel {\n\t\treturn this.sourcePort.getParent();\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "link",
                        "type": "LinkModel"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "link",
                    "type": "LinkModel",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getOutPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LabelModel",
            "id": "class-LabelModel-38242fcb62bcffd14a293ef7037c3a46",
            "file": "projects/ngx-diagrams/src/lib/models/label.model.ts",
            "type": "class",
            "sourceCode": "import { BaseModel } from './base.model';\nimport { LinkModel } from './link.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Coords } from '../interfaces/coords.interface';\nimport { SerializedLabelModel } from '../interfaces/serialization.interface';\n\nexport class LabelModel extends BaseModel<LinkModel> {\n\tprivate readonly _coords: BehaviorSubject<Coords> = new BehaviorSubject<Coords>({ x: 0, y: 0 });\n\tprivate readonly _rotation: BehaviorSubject<number> = new BehaviorSubject(0);\n\n\tprivate readonly coords$: Observable<Coords> = this._coords.pipe(this.entityPipe('coords'));\n\tprivate readonly rotation$: Observable<number> = this._rotation.pipe(this.entityPipe('rotation'));\n\n\tconstructor(type?: string, id?: string, logPrefix: string = '[Label]') {\n\t\tsuper(type, id, logPrefix);\n\t}\n\n\tserialize(): SerializedLabelModel {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\ttype: this.getType(),\n\t\t\trotation: this.getRotation(),\n\t\t\tcoords: this.getCoords(),\n\t\t};\n\t}\n\n\tgetRotation() {\n\t\treturn this._rotation.getValue();\n\t}\n\n\tgetCoords() {\n\t\treturn this._coords.getValue();\n\t}\n\n\tdestroy() {\n\t\tsuper.destroy();\n\t}\n\n\tsetRotation(angle: number) {\n\t\tthis._rotation.next(angle);\n\t}\n\n\tselectRotation(): Observable<number> {\n\t\treturn this.rotation$;\n\t}\n\n\tsetCoords(newCoords: Partial<Coords>) {\n\t\tthis._coords.next({ ...this._coords.getValue(), ...newCoords });\n\t}\n\n\tselectCoords(): Observable<Coords> {\n\t\treturn this.coords$;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Label]'"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Label]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_coords",
                    "defaultValue": "new BehaviorSubject<Coords>({ x: 0, y: 0 })",
                    "type": "BehaviorSubject<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_rotation",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "coords$",
                    "defaultValue": "this._coords.pipe(this.entityPipe('coords'))",
                    "type": "Observable<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "rotation$",
                    "defaultValue": "this._rotation.pipe(this.entityPipe('rotation'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "getRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "selectRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLabelModel",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRotation",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LinkCreatedAction",
            "id": "class-LinkCreatedAction-f770a22f6b9b410b87af49b3c2609e7f",
            "file": "projects/ngx-diagrams/src/lib/actions/links-created.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PortModel } from '../models/port.model';\nimport { NodeModel } from '../models/node.model';\nimport { LinkModel } from '../models';\n\n// TODO: refactor into entity-created.action, and fire every time a new entity is created!\nexport class LinkCreatedAction extends BaseAction {\n\tsourcePort: PortModel;\n\ttargetPort: PortModel;\n\tlink: LinkModel;\n\n\tconstructor(mouseX: number, mouseY: number, link: LinkModel) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.sourcePort = link.getSourcePort();\n\t\tthis.targetPort = link.getTargetPort();\n\t\tthis.link = link;\n\t}\n\n\tgetOutPortNode(): NodeModel {\n\t\treturn this.sourcePort.getParent();\n\t}\n\n\tgetInPortNode(): NodeModel {\n\t\treturn this.targetPort.getParent();\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "link",
                        "type": "LinkModel"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "link",
                    "type": "LinkModel",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "targetPort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getInPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "getOutPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LinkModel",
            "id": "class-LinkModel-9497fdc08ada9bec09b346f3b33442b6",
            "file": "projects/ngx-diagrams/src/lib/models/link.model.ts",
            "type": "class",
            "sourceCode": "import { BaseModel } from './base.model';\nimport { DiagramModel } from './diagram.model';\nimport { PortModel } from './port.model';\nimport { PointModel } from './point.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ID } from '../utils/tool-kit.util';\nimport { Coords } from '../interfaces/coords.interface';\nimport { LabelModel } from './label.model';\nimport { DiagramEngine } from '../services/engine.service';\nimport { SerializedLinkModel } from '../interfaces/serialization.interface';\n\nexport class LinkModel extends BaseModel<DiagramModel> {\n\tdiagramEngine: DiagramEngine;\n\n\t// TODO: decide what should be reactive using RXJS\n\tprivate name: string;\n\tprivate sourcePort: PortModel | null;\n\tprivate targetPort: PortModel | null;\n\tprivate points: PointModel[];\n\tprivate extras: any;\n\n\tprivate readonly _label$: BehaviorSubject<LabelModel> = new BehaviorSubject(null);\n\tlabel$: Observable<LabelModel> = this._label$.pipe(this.entityPipe('label'));\n\n\tconstructor(linkType: string = 'default', id?: string, logPrefix: string = '[Link]') {\n\t\tsuper(linkType, id, logPrefix);\n\t\tthis.points = [new PointModel(this, { x: 0, y: 0 }), new PointModel(this, { x: 0, y: 0 })];\n\t\tthis.extras = {};\n\t\tthis.sourcePort = null;\n\t\tthis.targetPort = null;\n\t}\n\n\tserialize(): SerializedLinkModel {\n\t\tconst serializedPoints = this.points.map(point => point.serialize());\n\t\tconst label = this.getLabel()?.serialize();\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.getName(),\n\t\t\tsourcePort: this.getSourcePort().id,\n\t\t\ttargetPort: this.getTargetPort().id,\n\t\t\textras: this.getExtras(),\n\t\t\tpoints: serializedPoints,\n\t\t\tlabel,\n\t\t};\n\t}\n\n\tsetName(name: string) {\n\t\tthis.name = name;\n\t}\n\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\tgetExtras(): any {\n\t\treturn this.extras;\n\t}\n\n\tsetExtras(extras: any) {\n\t\tthis.extras = extras;\n\t}\n\n\tdestroy() {\n\t\tif (this.sourcePort) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\n\t\tif (this.targetPort) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.setPoints(\n\t\t\tthis.getPoints().map((point: PointModel) => {\n\t\t\t\treturn point.clone(lookupTable);\n\t\t\t})\n\t\t);\n\t\tif (this.sourcePort) {\n\t\t\tclone.setSourcePort(this.sourcePort.clone(lookupTable));\n\t\t}\n\t\tif (this.targetPort) {\n\t\t\tclone.setTargetPort(this.targetPort.clone(lookupTable));\n\t\t}\n\t}\n\n\tisLastPoint(point: PointModel) {\n\t\tconst index = this.getPointIndex(point);\n\t\treturn index === this.points.length - 1;\n\t}\n\n\tgetPointIndex(point: PointModel) {\n\t\treturn this.points.indexOf(point);\n\t}\n\n\tgetPointModel(id: ID): PointModel | null {\n\t\tfor (const point of this.points) {\n\t\t\tif (point.id === id) {\n\t\t\t\treturn point;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPortForPoint(point: PointModel): PortModel {\n\t\tif (this.sourcePort !== null && this.getFirstPoint().id === point.id) {\n\t\t\treturn this.sourcePort;\n\t\t}\n\t\tif (this.targetPort !== null && this.getLastPoint().id === point.id) {\n\t\t\treturn this.targetPort;\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetPointForPort(port: PortModel): PointModel {\n\t\tif (this.sourcePort !== null && this.sourcePort.id === port.id) {\n\t\t\treturn this.getFirstPoint();\n\t\t}\n\t\tif (this.targetPort !== null && this.targetPort.id === port.id) {\n\t\t\treturn this.getLastPoint();\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetFirstPoint(): PointModel {\n\t\treturn this.points[0];\n\t}\n\n\tgetLastPoint(): PointModel {\n\t\treturn this.points[this.points.length - 1];\n\t}\n\n\tsetSourcePort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.sourcePort !== null) {\n\t\t\tthis.sourcePort.removeLink(this);\n\t\t}\n\t\tthis.sourcePort = port;\n\t}\n\n\tgetSourcePort(): PortModel {\n\t\treturn this.sourcePort;\n\t}\n\n\tgetTargetPort(): PortModel {\n\t\treturn this.targetPort;\n\t}\n\n\tsetTargetPort(port: PortModel) {\n\t\tif (port !== null) {\n\t\t\tport.addLink(this);\n\t\t}\n\t\tif (this.targetPort !== null) {\n\t\t\tthis.targetPort.removeLink(this);\n\t\t}\n\t\tthis.targetPort = port;\n\t}\n\n\tpoint({ x, y }: Coords): PointModel {\n\t\treturn this.addPoint(this.generatePoint({ x, y }));\n\t}\n\n\tgetPoints(): PointModel[] {\n\t\treturn this.points;\n\t}\n\n\tsetPoints(points: PointModel[]) {\n\t\tpoints.forEach(point => {\n\t\t\tpoint.setParent(this);\n\t\t});\n\t\tthis.points = points;\n\t}\n\n\tsetLabel(label: LabelModel) {\n\t\tlabel.setParent(this);\n\t\tthis._label$.next(label);\n\t}\n\n\tselectLabel(): Observable<LabelModel | null> {\n\t\treturn this.label$;\n\t}\n\n\tgetLabel(): LabelModel {\n\t\treturn this._label$.getValue();\n\t}\n\n\tresetLabel() {\n\t\tconst currentLabel = this._label$.getValue();\n\n\t\tif (currentLabel) {\n\t\t\tcurrentLabel.setParent(null);\n\t\t\tcurrentLabel.setPainted(false);\n\t\t}\n\n\t\tthis._label$.next(null);\n\t}\n\n\tremovePoint(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel), 1);\n\t}\n\n\tremovePointsBefore(pointModel: PointModel) {\n\t\tthis.points.splice(0, this.getPointIndex(pointModel));\n\t}\n\n\tremovePointsAfter(pointModel: PointModel) {\n\t\tthis.points.splice(this.getPointIndex(pointModel) + 1);\n\t}\n\n\tremoveMiddlePoints() {\n\t\tif (this.points.length > 2) {\n\t\t\tthis.points.splice(0, this.points.length - 2);\n\t\t}\n\t}\n\n\taddPoint<P extends PointModel>(pointModel: P, index = 1): P {\n\t\tpointModel.setParent(this);\n\t\tpointModel.setLocked(this.getLocked());\n\t\tthis.points.splice(index, 0, pointModel);\n\t\treturn pointModel;\n\t}\n\n\tgeneratePoint({ x = 0, y = 0 }: Coords): PointModel {\n\t\treturn new PointModel(this, { x, y });\n\t}\n\n\tsetLocked(locked: boolean = true) {\n\t\tsuper.setLocked(locked);\n\t\tthis.points.forEach(point => point.setLocked(locked));\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "linkType",
                        "type": "string",
                        "defaultValue": "'default'"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Link]'"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "linkType",
                        "type": "string",
                        "defaultValue": "'default'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Link]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_label$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<LabelModel>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngine",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "label$",
                    "defaultValue": "this._label$.pipe(this.entityPipe('label'))",
                    "type": "Observable<LabelModel>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "points",
                    "type": "PointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "targetPort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addPoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "P"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [
                        "P"
                    ],
                    "line": 220,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generatePoint",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "getFirstPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "LabelModel",
                    "typeParameters": [],
                    "line": 187
                },
                {
                    "name": "getLastPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 131
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "getPointForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPointIndex",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPointModel",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel | null",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel[]",
                    "typeParameters": [],
                    "line": 167
                },
                {
                    "name": "getPortForPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSourcePort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 145
                },
                {
                    "name": "getTargetPort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "isLastPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "point",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMiddlePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214
                },
                {
                    "name": "removePoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePointsAfter",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removePointsBefore",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LabelModel | null>",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLinkModel",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "PointModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "PointModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSourcePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTargetPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LockEvent",
            "id": "class-LockEvent-a1b25ab2b6c79a87bcb302a83d8d1347",
            "file": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { ID, UID } from '../utils/tool-kit.util';\nimport { BaseEntity } from '../base.entity';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n\tentity: T;\n\tentityId: ID;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: ID;\n\tpropogate: boolean;\n\n\tconstructor(entity: T, options?: any) {\n\t\tthis.id = UID();\n\t\tthis.entity = entity;\n\t\tthis.entityId = entity.id;\n\t\tthis.firing = true;\n\t\tthis.stopPropagation = () => (this.firing = false);\n\t\tthis.propogate = options ? options.propagate : null;\n\t}\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tlocked: boolean;\n\n\tconstructor(entity: T, locked: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.locked = locked;\n\t}\n}\nexport class ParentChangeEvent<P extends BaseEntity = BaseEntity, T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tparent: P;\n\n\tconstructor(entity: T, parent: P) {\n\t\tsuper(entity);\n\t\tthis.parent = parent;\n\t}\n}\nexport class SelectionEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisSelected: boolean;\n\n\tconstructor(entity: T, selected: boolean) {\n\t\tsuper(entity);\n\t\tthis.isSelected = selected;\n\t}\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisPainted: boolean;\n\n\tconstructor(entity: T, painted: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.isPainted = painted;\n\t}\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "locked",
                        "type": "boolean",
                        "defaultValue": "false"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locked",
                        "type": "boolean",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "locked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LooseLinkDestroyed",
            "id": "class-LooseLinkDestroyed-615005ec2bba2f0bdcbc67d230a5e89f",
            "file": "projects/ngx-diagrams/src/lib/actions/loose-link-destroyed.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PortModel } from '../models/port.model';\nimport { NodeModel } from '../models/node.model';\nimport { LinkModel } from '../models';\n\nexport class LooseLinkDestroyed extends BaseAction {\n\tsourcePort: PortModel;\n\tlink: LinkModel;\n\n\tconstructor(mouseX: number, mouseY: number, link: LinkModel) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.sourcePort = link.getSourcePort();\n\t\tthis.link = link;\n\t}\n\n\tgetOutPortNode(): NodeModel {\n\t\treturn this.sourcePort.getParent();\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "link",
                        "type": "LinkModel"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "link",
                    "type": "LinkModel",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getOutPortNode",
                    "args": [],
                    "optional": false,
                    "returnType": "NodeModel",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MoveCanvasAction",
            "id": "class-MoveCanvasAction-36cd1a4de6841ebd36b4c3915019d143",
            "file": "projects/ngx-diagrams/src/lib/actions/move-canvas.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { DiagramModel } from '../models/diagram.model';\n\nexport class MoveCanvasAction extends BaseAction {\n\tinitialOffsetX: number;\n\tinitialOffsetY: number;\n\n\tconstructor(mouseX: number, mouseY: number, diagramModel: DiagramModel) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.initialOffsetX = diagramModel.getOffsetX();\n\t\tthis.initialOffsetY = diagramModel.getOffsetY();\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "diagramModel",
                        "type": "DiagramModel"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "diagramModel",
                        "type": "DiagramModel",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "initialOffsetX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "initialOffsetY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MoveItemsAction",
            "id": "class-MoveItemsAction-8134c0458e5d0cce121598b411cf918d",
            "file": "projects/ngx-diagrams/src/lib/actions/move-items.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { PointModel } from '../models/point.model';\nimport { NodeModel } from '../models/node.model';\nimport { DiagramEngine } from '../services/engine.service';\nimport { SelectionModel } from '../models/move-selection.model';\nimport { LinkModel } from '../models/link.model';\n\nexport class MoveItemsAction extends BaseAction {\n\tselectionModels: SelectionModel[];\n\tmoved: boolean;\n\n\tconstructor(mouseX: number, mouseY: number, diagramEngine: DiagramEngine) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.moved = false;\n\t\tlet selectedItems = diagramEngine.getDiagramModel().getSelectedItems();\n\n\t\t// dont allow items which are locked to move and links which generate their position based on points.\n\t\tselectedItems = selectedItems.filter(item => {\n\t\t\treturn !diagramEngine.isModelLocked(item) && !(item instanceof LinkModel);\n\t\t});\n\n\t\tthis.selectionModels = selectedItems.map((item: PointModel | NodeModel) => {\n\t\t\tconst { x: initialX, y: initialY } = item.getCoords();\n\t\t\treturn {\n\t\t\t\tmodel: item,\n\t\t\t\tinitialX,\n\t\t\t\tinitialY,\n\t\t\t};\n\t\t});\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    },
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "moved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectionModels",
                    "type": "SelectionModel[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NodeModel",
            "id": "class-NodeModel-94cefb7ea70976110bd336987130a310",
            "file": "projects/ngx-diagrams/src/lib/models/node.model.ts",
            "type": "class",
            "sourceCode": "import { BehaviorSubject, Observable } from 'rxjs';\nimport { PortModel } from './port.model';\nimport { BaseModel } from './base.model';\nimport { DiagramModel } from './diagram.model';\nimport { Coords } from '../interfaces/coords.interface';\nimport { DiagramEngine } from '../services/engine.service';\nimport { map } from 'rxjs/operators';\nimport { Dimensions } from '../interfaces/dimensions.interface';\nimport { ID, mapToArray } from '../utils/tool-kit.util';\nimport { SerializedNodeModel } from '../interfaces/serialization.interface';\n\nexport class NodeModel<P extends PortModel = PortModel> extends BaseModel<DiagramModel> {\n\tprivate readonly _diagramEngine$: BehaviorSubject<DiagramEngine> = new BehaviorSubject<DiagramEngine>(null);\n\tprivate readonly _extras$: BehaviorSubject<{ [s: string]: any }> = new BehaviorSubject({});\n\tprivate readonly _ports$: BehaviorSubject<{ [s: string]: P }> = new BehaviorSubject({});\n\tprivate readonly _coords$: BehaviorSubject<Coords> = new BehaviorSubject<Coords>({ x: 0, y: 0 });\n\tprivate readonly _dimensions$: BehaviorSubject<Dimensions> = new BehaviorSubject<Dimensions>({ width: 0, height: 0 });\n\n\tprivate readonly diagramEngine$: Observable<{ [s: string]: any }> = this._diagramEngine$.pipe(this.entityPipe('diagramEngine'));\n\tprivate readonly extras$: Observable<{ [s: string]: any }> = this._extras$.pipe(this.entityPipe('extras'));\n\tprivate readonly ports$: Observable<{ [s: string]: P }> = this._ports$.pipe(this.entityPipe('ports'));\n\tprivate readonly coords$: Observable<Coords> = this._coords$.pipe(this.entityPipe('coords'));\n\tprivate readonly dimensions$: Observable<Dimensions> = this._dimensions$.pipe(this.entityPipe('dimensions'));\n\n\tconstructor(\n\t\tnodeType: string = 'default',\n\t\tid?: string,\n\t\textras: { [s: string]: any } = {},\n\t\tx: number = 0,\n\t\ty: number = 0,\n\t\twidth: number = 0,\n\t\theight: number = 0,\n\t\tlogPrefix = '[Node]'\n\t) {\n\t\tsuper(nodeType, id, logPrefix);\n\t\tthis.setExtras(extras);\n\t\tthis.setDimensions({ width, height });\n\t\tthis.setCoords({ x, y });\n\t}\n\n\tgetDiagramEngine() {\n\t\treturn this._diagramEngine$.getValue();\n\t}\n\n\tselectDiagramEngine() {\n\t\treturn this.diagramEngine$;\n\t}\n\n\tsetDiagramEngine(diagramEngine: DiagramEngine) {\n\t\tthis._diagramEngine$.next(diagramEngine);\n\t}\n\n\tgetCoords(): Coords {\n\t\treturn this._coords$.getValue();\n\t}\n\n\tsetCoords({ x, y }: Coords) {\n\t\tconst { x: oldX, y: oldY } = this.getCoords();\n\n\t\tObject.values(this._ports$.getValue()).forEach(port => {\n\t\t\tObject.values(port.getLinks()).forEach(link => {\n\t\t\t\tconst point = link.getPointForPort(port);\n\t\t\t\tconst { x: pointX, y: pointY } = point.getCoords();\n\t\t\t\tpoint.setCoords({ x: pointX + x - oldX, y: pointY + y - oldY });\n\t\t\t});\n\t\t});\n\n\t\tthis._coords$.next({ x, y });\n\t}\n\n\tserialize(): SerializedNodeModel {\n\t\tconst serializedPorts = Object.values(this.getPorts()).map((port: P) => port.serialize());\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tnodeType: this.getType(),\n\t\t\textras: this.getExtras(),\n\t\t\twidth: this.getWidth(),\n\t\t\theight: this.getHeight(),\n\t\t\t...this.getCoords(),\n\t\t\tports: serializedPorts,\n\t\t};\n\t}\n\n\t// TODO: override selectionChanges and replace this with it (convert to rx)\n\tgetSelectedEntities() {\n\t\tlet entities = super.getSelectedEntities();\n\n\t\t// add the points of each link that are selected here\n\t\tif (this.getSelected()) {\n\t\t\tObject.values(this._ports$.getValue()).forEach(port => {\n\t\t\t\tconst links = Object.values(port.getLinks());\n\t\t\t\tentities = entities.concat(\n\t\t\t\t\tlinks.map(link => {\n\t\t\t\t\t\treturn link.getPointForPort(port);\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\tthis.log('selectedEntities', entities);\n\t\treturn entities;\n\t}\n\n\t// TODO: map to BaseEvent\n\tcoordsChanges(): Observable<Coords> {\n\t\treturn this.coords$;\n\t}\n\n\tselectCoords(): Observable<Coords> {\n\t\treturn this.coords$;\n\t}\n\n\tselectX(): Observable<number> {\n\t\treturn this.coords$.pipe(map(c => c.x));\n\t}\n\n\tselectY(): Observable<number> {\n\t\treturn this.coords$.pipe(map(c => c.y));\n\t}\n\n\t/**\n\t * Assign a port to the node and set the node as its getParent\n\t * @returns the inserted port\n\t */\n\taddPort(port: P): P {\n\t\tport.setParent(this);\n\t\tthis._ports$.next({ ...this._ports$.getValue(), [port.id]: port });\n\t\treturn port;\n\t}\n\n\tremovePort(port: P): string {\n\t\tconst updatedPorts = this._ports$.getValue();\n\n\t\tdelete updatedPorts[port.id];\n\t\tthis._ports$.next({ ...updatedPorts });\n\n\t\tport.destroy();\n\n\t\treturn port.id;\n\t}\n\n\tgetPort(id: ID): P {\n\t\treturn this._ports$.value[id];\n\t}\n\n\tselectPorts(selector?: () => boolean | ID | ID[]): Observable<P[]> {\n\t\t// TODO: implement selector\n\t\t// TODO: create coerce func\n\t\treturn this.ports$.pipe(\n\t\t\tmap(ports => mapToArray(ports)),\n\t\t\tthis.withLog('selectPorts')\n\t\t);\n\t}\n\n\tgetPorts(ids?: ID[]): { [s: string]: P | P[] } {\n\t\treturn this._ports$.getValue();\n\t}\n\n\tsetDimensions({ width, height }: Dimensions) {\n\t\tthis._dimensions$.next({ width, height });\n\t}\n\n\tgetDimensions(): Dimensions {\n\t\treturn this._dimensions$.getValue();\n\t}\n\n\t// TODO: return BaseEvent extension\n\tdimensionChanges(): Observable<Dimensions> {\n\t\treturn this.dimensions$;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this._dimensions$.getValue().height;\n\t}\n\n\tsetHeight(height: number) {\n\t\treturn this._dimensions$.next({ width: this.getWidth(), height });\n\t}\n\n\tgetWidth(): number {\n\t\treturn this._dimensions$.getValue().width;\n\t}\n\n\tsetWidth(width: number) {\n\t\treturn this._dimensions$.next({ width, height: this.getHeight() });\n\t}\n\n\tselectWidth(): Observable<number> {\n\t\treturn this.dimensions$.pipe(\n\t\t\tmap(d => d.width),\n\t\t\tthis.withLog('selectWidth')\n\t\t);\n\t}\n\n\tselectHeight(): Observable<number> {\n\t\treturn this.dimensions$.pipe(\n\t\t\tmap(d => d.height),\n\t\t\tthis.withLog('selectHeight')\n\t\t);\n\t}\n\n\tsetExtras(extras: any) {\n\t\tthis._extras$.next(extras);\n\t}\n\n\tgetExtras() {\n\t\treturn this._extras$.getValue();\n\t}\n\n\tselectExtras<E = any>(selector?: (extra: E) => E[keyof E] | string | string[]) {\n\t\t// TODO: impl selector\n\t\treturn this.extras$;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "nodeType",
                        "type": "string",
                        "defaultValue": "'default'"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "extras",
                        "type": "literal type",
                        "defaultValue": "{}"
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "defaultValue": "0"
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Node]'"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "nodeType",
                        "type": "string",
                        "defaultValue": "'default'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "extras",
                        "type": "literal type",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "width",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "height",
                        "type": "number",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Node]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_coords$",
                    "defaultValue": "new BehaviorSubject<Coords>({ x: 0, y: 0 })",
                    "type": "BehaviorSubject<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_diagramEngine$",
                    "defaultValue": "new BehaviorSubject<DiagramEngine>(null)",
                    "type": "BehaviorSubject<DiagramEngine>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_dimensions$",
                    "defaultValue": "new BehaviorSubject<Dimensions>({ width: 0, height: 0 })",
                    "type": "BehaviorSubject<Dimensions>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_extras$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_ports$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "coords$",
                    "defaultValue": "this._coords$.pipe(this.entityPipe('coords'))",
                    "type": "Observable<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "diagramEngine$",
                    "defaultValue": "this._diagramEngine$.pipe(this.entityPipe('diagramEngine'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "dimensions$",
                    "defaultValue": "this._dimensions$.pipe(this.entityPipe('dimensions'))",
                    "type": "Observable<Dimensions>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "extras$",
                    "defaultValue": "this._extras$.pipe(this.entityPipe('extras'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "ports$",
                    "defaultValue": "this._ports$.pipe(this.entityPipe('ports'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 125,
                    "description": "<p>Assign a port to the node and set the node as its getParent</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3992,
                                "end": 3999,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the inserted port</p>\n"
                        }
                    ]
                },
                {
                    "name": "coordsChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "dimensionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Dimensions>",
                    "typeParameters": [],
                    "line": 168
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "getDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "Dimensions",
                    "typeParameters": [],
                    "line": 163
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 206
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 172
                },
                {
                    "name": "getPort",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPorts",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 180
                },
                {
                    "name": "removePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "selectDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "selectExtras",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 195
                },
                {
                    "name": "selectPorts",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<P[]>",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 188
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 117
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedNodeModel",
                    "typeParameters": [],
                    "line": 71
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDiagramEngine",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDimensions",
                    "args": [
                        {
                            "type": "Dimensions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "type": "Dimensions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PaintedEvent",
            "id": "class-PaintedEvent-a1b25ab2b6c79a87bcb302a83d8d1347",
            "file": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { ID, UID } from '../utils/tool-kit.util';\nimport { BaseEntity } from '../base.entity';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n\tentity: T;\n\tentityId: ID;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: ID;\n\tpropogate: boolean;\n\n\tconstructor(entity: T, options?: any) {\n\t\tthis.id = UID();\n\t\tthis.entity = entity;\n\t\tthis.entityId = entity.id;\n\t\tthis.firing = true;\n\t\tthis.stopPropagation = () => (this.firing = false);\n\t\tthis.propogate = options ? options.propagate : null;\n\t}\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tlocked: boolean;\n\n\tconstructor(entity: T, locked: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.locked = locked;\n\t}\n}\nexport class ParentChangeEvent<P extends BaseEntity = BaseEntity, T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tparent: P;\n\n\tconstructor(entity: T, parent: P) {\n\t\tsuper(entity);\n\t\tthis.parent = parent;\n\t}\n}\nexport class SelectionEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisSelected: boolean;\n\n\tconstructor(entity: T, selected: boolean) {\n\t\tsuper(entity);\n\t\tthis.isSelected = selected;\n\t}\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisPainted: boolean;\n\n\tconstructor(entity: T, painted: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.isPainted = painted;\n\t}\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "painted",
                        "type": "boolean",
                        "defaultValue": "false"
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "painted",
                        "type": "boolean",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isPainted",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ParentChangeEvent",
            "id": "class-ParentChangeEvent-a1b25ab2b6c79a87bcb302a83d8d1347",
            "file": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { ID, UID } from '../utils/tool-kit.util';\nimport { BaseEntity } from '../base.entity';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n\tentity: T;\n\tentityId: ID;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: ID;\n\tpropogate: boolean;\n\n\tconstructor(entity: T, options?: any) {\n\t\tthis.id = UID();\n\t\tthis.entity = entity;\n\t\tthis.entityId = entity.id;\n\t\tthis.firing = true;\n\t\tthis.stopPropagation = () => (this.firing = false);\n\t\tthis.propogate = options ? options.propagate : null;\n\t}\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tlocked: boolean;\n\n\tconstructor(entity: T, locked: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.locked = locked;\n\t}\n}\nexport class ParentChangeEvent<P extends BaseEntity = BaseEntity, T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tparent: P;\n\n\tconstructor(entity: T, parent: P) {\n\t\tsuper(entity);\n\t\tthis.parent = parent;\n\t}\n}\nexport class SelectionEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisSelected: boolean;\n\n\tconstructor(entity: T, selected: boolean) {\n\t\tsuper(entity);\n\t\tthis.isSelected = selected;\n\t}\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisPainted: boolean;\n\n\tconstructor(entity: T, painted: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.isPainted = painted;\n\t}\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "parent",
                        "type": "P"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parent",
                        "type": "P",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "parent",
                    "type": "P",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PathFinding",
            "id": "class-PathFinding-96ea829e21c85d94b38514193e49653b",
            "file": "projects/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
            "type": "class",
            "sourceCode": "import { DiagramEngine } from '../services/engine.service';\nimport * as PF from 'pathfinding';\n\nexport const ROUTING_SCALING_FACTOR = 10;\n\nexport class PathFinding {\n\tprivate pathFinderInstance:\n\t\t| PF.JPFNeverMoveDiagonally\n\t\t| PF.JPFAlwaysMoveDiagonally\n\t\t| PF.JPFMoveDiagonallyIfNoObstacles\n\t\t| PF.JPFMoveDiagonallyIfAtMostOneObstacle;\n\n\tconstructor(private diagramEngine: DiagramEngine, heuristic = PF.Heuristic.manhattan) {\n\t\tthis.pathFinderInstance = new PF.AStarFinder({\n\t\t\theuristic,\n\t\t\tdiagonalMovement: PF.DiagonalMovement.Always,\n\t\t\tweight: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Taking as argument a fully unblocked walking matrix, this method\n\t * finds a direct path from point A to B.\n\t */\n\tcalculateDirectPath(\n\t\tfrom: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tto: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t}\n\t): number[][] {\n\t\tconst matrix = this.diagramEngine.getCanvasMatrix();\n\t\tconst grid = new PF.Grid(matrix);\n\n\t\tconst fromX = this.diagramEngine.translateRoutingX(Math.floor(from.x / ROUTING_SCALING_FACTOR));\n\t\tconst toX = this.diagramEngine.translateRoutingX(Math.floor(to.x / ROUTING_SCALING_FACTOR));\n\t\tconst fromY = this.diagramEngine.translateRoutingX(Math.floor(from.y / ROUTING_SCALING_FACTOR));\n\t\tconst toY = this.diagramEngine.translateRoutingX(Math.floor(to.y / ROUTING_SCALING_FACTOR));\n\n\t\tconst path = this.pathFinderInstance.findPath(fromX, fromY, toX, toY, grid);\n\t\treturn path;\n\t}\n\n\t/**\n\t * Using @link{#calculateDirectPath}'s result as input, we here\n\t * determine the first walkable point found in the matrix that includes\n\t * blocked paths.\n\t */\n\tcalculateLinkStartEndCoords(\n\t\tmatrix: number[][],\n\t\tpath: number[][]\n\t): {\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t};\n\t\tpathToStart: number[][];\n\t\tpathToEnd: number[][];\n\t} {\n\t\tconst startIndex = path.findIndex(point => matrix[point[1]][point[0]] === 0);\n\t\tconst endIndex =\n\t\t\tpath.length -\n\t\t\t1 -\n\t\t\tpath\n\t\t\t\t.slice()\n\t\t\t\t.reverse()\n\t\t\t\t.findIndex(point => matrix[point[1]][point[0]] === 0);\n\n\t\t// are we trying to create a path exclusively through blocked areas?\n\t\t// if so, let's fallback to the linear routing\n\t\tif (startIndex === -1 || endIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst pathToStart = path.slice(0, startIndex);\n\t\tconst pathToEnd = path.slice(endIndex);\n\n\t\treturn {\n\t\t\tstart: {\n\t\t\t\tx: path[startIndex][0],\n\t\t\t\ty: path[startIndex][1],\n\t\t\t},\n\t\t\tend: {\n\t\t\t\tx: path[endIndex][0],\n\t\t\t\ty: path[endIndex][1],\n\t\t\t},\n\t\t\tpathToStart,\n\t\t\tpathToEnd,\n\t\t};\n\t}\n\n\t/**\n\t * Puts everything together: merges the paths from/to the centre of the ports,\n\t * with the path calculated around other elements.\n\t */\n\tcalculateDynamicPath(\n\t\troutingMatrix: number[][],\n\t\tstart: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tend: {\n\t\t\tx: number;\n\t\t\ty: number;\n\t\t},\n\t\tpathToStart: number[][],\n\t\tpathToEnd: number[][]\n\t) {\n\t\t// generate the path based on the matrix with obstacles\n\t\tconst grid = new PF.Grid(routingMatrix);\n\t\tconst dynamicPath = this.pathFinderInstance.findPath(start.x, start.y, end.x, end.y, grid);\n\n\t\t// aggregate everything to have the calculated path ready for rendering\n\t\tconst pathCoords = pathToStart\n\t\t\t.concat(dynamicPath, pathToEnd)\n\t\t\t.map(coords => [this.diagramEngine.translateRoutingX(coords[0], true), this.diagramEngine.translateRoutingY(coords[1], true)]);\n\n\t\treturn PF.Util.compressPath(pathCoords);\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine"
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "diagramEngine",
                        "type": "DiagramEngine",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "heuristic",
                        "type": "",
                        "defaultValue": "PF.Heuristic.manhattan",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "pathFinderInstance",
                    "type": "PF.JPFNeverMoveDiagonally | PF.JPFAlwaysMoveDiagonally | PF.JPFMoveDiagonallyIfNoObstacles | PF.JPFMoveDiagonallyIfAtMostOneObstacle",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculateDirectPath",
                    "args": [
                        {
                            "name": "from",
                            "type": "literal type"
                        },
                        {
                            "name": "to",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 25,
                    "description": "<p>Taking as argument a fully unblocked walking matrix, this method\nfinds a direct path from point A to B.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDynamicPath",
                    "args": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "start",
                            "type": "literal type"
                        },
                        {
                            "name": "end",
                            "type": "literal type"
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]"
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 103,
                    "description": "<p>Puts everything together: merges the paths from/to the centre of the ports,\nwith the path calculated around other elements.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "routingMatrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToStart",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pathToEnd",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateLinkStartEndCoords",
                    "args": [
                        {
                            "name": "matrix",
                            "type": "number[][]"
                        },
                        {
                            "name": "path",
                            "type": "number[][]"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 52,
                    "description": "<p>Using @link{#calculateDirectPath}&#39;s result as input, we here\ndetermine the first walkable point found in the matrix that includes\nblocked paths.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "matrix",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "number[][]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PointModel",
            "id": "class-PointModel-ec75249871542a913eb5975d40902be7",
            "file": "projects/ngx-diagrams/src/lib/models/point.model.ts",
            "type": "class",
            "sourceCode": "import { BaseModel } from './base.model';\nimport { LinkModel } from './link.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Coords } from '../interfaces/coords.interface';\nimport { map } from 'rxjs/operators';\nimport { SerializedPointModel } from '../interfaces/serialization.interface';\n\nexport class PointModel extends BaseModel<LinkModel> {\n\tprivate readonly _coords: BehaviorSubject<Coords>;\n\tprivate readonly coords$: Observable<Coords>;\n\n\tconstructor(link: LinkModel, { x, y }: Coords, id?: string, logPrefix: string = '[Point]') {\n\t\tsuper(link.getType(), id, logPrefix);\n\t\tthis._coords = new BehaviorSubject<Coords>({ x, y });\n\t\tthis.coords$ = this._coords.pipe(this.entityPipe('coords'));\n\t\tthis.setParent(link);\n\t}\n\n\tserialize(): SerializedPointModel {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tcoords: this.getCoords(),\n\t\t};\n\t}\n\n\tisConnectedToPort() {\n\t\treturn this.getParent().getPortForPoint(this) !== null;\n\t}\n\n\tgetLink(): LinkModel {\n\t\treturn this.getParent();\n\t}\n\n\tdestroy() {\n\t\tif (this.getParent) {\n\t\t\tthis.getParent().removePoint(this);\n\t\t}\n\n\t\tsuper.destroy();\n\t}\n\n\tsetCoords(newCoords: Partial<Coords>) {\n\t\tthis._coords.next({ ...this._coords.getValue(), ...newCoords });\n\t}\n\n\tselectCoords(): Observable<Coords> {\n\t\treturn this.coords$;\n\t}\n\n\tgetCoords(): Coords {\n\t\treturn this._coords.getValue();\n\t}\n\n\tselectX(): Observable<number> {\n\t\treturn this.selectCoords().pipe(map(c => c.x));\n\t}\n\n\tselectY(): Observable<number> {\n\t\treturn this.selectCoords().pipe(map(c => c.y));\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "link",
                        "type": "LinkModel"
                    },
                    {
                        "type": "Coords"
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Point]'"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "link",
                        "type": "LinkModel",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "type": "Coords",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Point]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_coords",
                    "type": "BehaviorSubject<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "coords$",
                    "type": "Observable<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "getLink",
                    "args": [],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "isConnectedToPort",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedPointModel",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PortModel",
            "id": "class-PortModel-734e5e7b1b64aa5ee35a3d61bddee7e4",
            "file": "projects/ngx-diagrams/src/lib/models/port.model.ts",
            "type": "class",
            "sourceCode": "import { BaseModel } from './base.model';\nimport { NodeModel } from './node.model';\nimport { LinkModel } from './link.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, shareReplay, takeUntil } from 'rxjs/operators';\n\nexport class PortModel extends BaseModel<NodeModel> {\n\t// TODO: convert all primitives to subjects\n\tprivate name: string;\n\tprivate maximumLinks: number;\n\tprivate linkType: string;\n\n\tprivate _links$: BehaviorSubject<{ [id: string]: LinkModel }> = new BehaviorSubject({});\n\tprivate _x$: BehaviorSubject<number> = new BehaviorSubject(0);\n\tprivate _y$: BehaviorSubject<number> = new BehaviorSubject(0);\n\tprivate _magnetic$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n\tprivate _width$: BehaviorSubject<number> = new BehaviorSubject(0);\n\tprivate _height$: BehaviorSubject<number> = new BehaviorSubject(0);\n\tprivate _canCreateLinks$: BehaviorSubject<boolean> = new BehaviorSubject(true);\n\n\tprivate links$: Observable<{ [id: string]: LinkModel }> = this._links$.pipe(\n\t\ttakeUntil(this.onEntityDestroy()),\n\t\tdistinctUntilChanged(),\n\t\tshareReplay(1)\n\t);\n\tprivate x$: Observable<number> = this._x$.pipe(this.entityPipe('x'));\n\tprivate y$: Observable<number> = this._y$.pipe(this.entityPipe('y'));\n\tprivate magnetic$: Observable<boolean> = this._magnetic$.pipe(this.entityPipe('magnetic'));\n\n\tconstructor(\n\t\tname: string,\n\t\ttype?: string,\n\t\tid?: string,\n\t\tmaximumLinks?: number,\n\t\tlinkType?: string,\n\t\tmagnetic: boolean = true,\n\t\tlogPrefix: string = '[Port]'\n\t) {\n\t\tsuper(type, id, logPrefix);\n\t\tthis.name = name;\n\t\tthis.maximumLinks = maximumLinks;\n\t\tthis.linkType = linkType;\n\t\tthis.setMagnetic(magnetic);\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.getName(),\n\t\t\tlinkType: this.getLinkType(),\n\t\t\tmaximumLinks: this.getMaximumLinks(),\n\t\t\ttype: this.getType(),\n\t\t\tmagnetic: this.getMagnetic(),\n\t\t\theight: this.getHeight(),\n\t\t\twidth: this.getWidth(),\n\t\t\tcanCreateLinks: this.getCanCreateLinks(),\n\t\t\t...this.getCoords(),\n\t\t};\n\t}\n\n\tgetNode() {\n\t\treturn this.getParent();\n\t}\n\n\tgetName() {\n\t\treturn this.name;\n\t}\n\n\tgetCanCreateLinks(): boolean {\n\t\tconst numberOfLinks: number = Object.keys(this._links$.getValue()).length;\n\n\t\tif (this.maximumLinks && numberOfLinks >= this.maximumLinks) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._canCreateLinks$.getValue();\n\t}\n\n\tgetCoords() {\n\t\treturn { x: this.getX(), y: this.getY() };\n\t}\n\n\tselectCanCreateLinks() {\n\t\treturn this._canCreateLinks$;\n\t}\n\n\tsetCanCreateLinks(value: boolean) {\n\t\tthis._canCreateLinks$.next(value);\n\t}\n\n\tgetMagnetic() {\n\t\treturn this._magnetic$.getValue();\n\t}\n\n\tselectMagnetic() {\n\t\treturn this.magnetic$;\n\t}\n\n\tsetMagnetic(magnetic: boolean) {\n\t\tthis._magnetic$.next(magnetic);\n\t}\n\n\tselectX(): Observable<number> {\n\t\treturn this.x$;\n\t}\n\n\tselectY(): Observable<number> {\n\t\treturn this.y$;\n\t}\n\n\tgetY() {\n\t\treturn this._y$.getValue();\n\t}\n\n\tgetX() {\n\t\treturn this._x$.getValue();\n\t}\n\n\tgetHeight() {\n\t\treturn this._height$.getValue();\n\t}\n\n\tgetWidth() {\n\t\treturn this._width$.getValue();\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.maximumLinks = maximumLinks;\n\t}\n\n\tgetLinkType() {\n\t\treturn this.linkType;\n\t}\n\n\tsetLinkType(type: string) {\n\t\tthis.linkType = type;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tconst links = this._links$.getValue();\n\t\tdelete links[link.id];\n\t\tthis._links$.next({ ...links });\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis._links$.next({ ...this._links$.value, [link.id]: link });\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this._links$.getValue();\n\t}\n\n\tselectLinks(): Observable<{ [id: string]: LinkModel }> {\n\t\treturn this.links$;\n\t}\n\n\tupdateCoords({ x, y, width, height }: { x: number; y: number; width: number; height: number }) {\n\t\tthis._x$.next(x);\n\t\tthis._y$.next(y);\n\t\tthis._width$.next(width);\n\t\tthis._height$.next(height);\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.getLocked();\n\t}\n\n\tcreateLinkModel() {\n\t\tif (this.getCanCreateLinks()) {\n\t\t\treturn new LinkModel();\n\t\t}\n\t}\n\n\tdestroy() {\n\t\tsuper.destroy();\n\n\t\tObject.values(this.getLinks()).forEach(link => {\n\t\t\tlink.destroy();\n\t\t});\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "maximumLinks",
                        "type": "number",
                        "optional": true
                    },
                    {
                        "name": "linkType",
                        "type": "string",
                        "optional": true
                    },
                    {
                        "name": "magnetic",
                        "type": "boolean",
                        "defaultValue": "true"
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Port]'"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maximumLinks",
                        "type": "number",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkType",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "magnetic",
                        "type": "boolean",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logPrefix",
                        "type": "string",
                        "defaultValue": "'[Port]'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "_canCreateLinks$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_height$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_links$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_magnetic$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_width$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_x$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_y$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "links$",
                    "defaultValue": "this._links$.pipe(\n\t\ttakeUntil(this.onEntityDestroy()),\n\t\tdistinctUntilChanged(),\n\t\tshareReplay(1)\n\t)",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "magnetic$",
                    "defaultValue": "this._magnetic$.pipe(this.entityPipe('magnetic'))",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "x$",
                    "defaultValue": "this._x$.pipe(this.entityPipe('x'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "y$",
                    "defaultValue": "this._y$.pipe(this.entityPipe('y'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methods": [
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 168,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182
                },
                {
                    "name": "getCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 153
                },
                {
                    "name": "getLinkType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "getMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91
                },
                {
                    "name": "getMaximumLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "getNode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "getX",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "getY",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "isLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172
                },
                {
                    "name": "removeLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 157
                },
                {
                    "name": "selectMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 107
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "setCanCreateLinks",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLinkType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMagnetic",
                    "args": [
                        {
                            "name": "magnetic",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "magnetic",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMaximumLinks",
                    "args": [
                        {
                            "name": "maximumLinks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "maximumLinks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCoords",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "BaseModel",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectingAction",
            "id": "class-SelectingAction-612cc156264147f5d121c4901586319e",
            "file": "projects/ngx-diagrams/src/lib/actions/selecting.action.ts",
            "type": "class",
            "sourceCode": "import { BaseAction } from './base.action';\nimport { DiagramModel } from '../models/diagram.model';\nimport { Coords } from '../interfaces/coords.interface';\n\nexport class SelectingAction extends BaseAction {\n\tmouseX2: number;\n\tmouseY2: number;\n\n\tdimensions: {\n\t\ttop: number;\n\t\tleft: number;\n\t\twidth: number;\n\t\theight: number;\n\t\tright: number;\n\t\tbottom: number;\n\t};\n\n\tconstructor(mouseX: number, mouseY: number) {\n\t\tsuper(mouseX, mouseY);\n\t\tthis.mouseX2 = mouseX;\n\t\tthis.mouseY2 = mouseY;\n\t}\n\n\tgetBoxDimensions() {\n\t\tthis.dimensions = {\n\t\t\tleft: this.mouseX2 > this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\ttop: this.mouseY2 > this.mouseY ? this.mouseY : this.mouseY2,\n\t\t\twidth: Math.abs(this.mouseX2 - this.mouseX),\n\t\t\theight: Math.abs(this.mouseY2 - this.mouseY),\n\t\t\tright: this.mouseX2 < this.mouseX ? this.mouseX : this.mouseX2,\n\t\t\tbottom: this.mouseY2 < this.mouseY ? this.mouseY : this.mouseY2\n\t\t};\n\t\treturn this.dimensions;\n\t}\n\n\tcontainsElement({ x, y }: Coords, diagramModel: DiagramModel): boolean {\n\t\tconst z = diagramModel.getZoomLevel() / 100.0;\n\t\tconst dimensions = this.getBoxDimensions();\n\n\t\treturn (\n\t\t\tx * z + diagramModel.getOffsetX() > dimensions.left &&\n\t\t\tx * z + diagramModel.getOffsetX() < dimensions.right &&\n\t\t\ty * z + diagramModel.getOffsetY() > dimensions.top &&\n\t\t\ty * z + diagramModel.getOffsetY() < dimensions.bottom\n\t\t);\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mouseX",
                        "type": "number"
                    },
                    {
                        "name": "mouseY",
                        "type": "number"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "mouseX",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mouseY",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "dimensions",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mouseX2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mouseY2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "mouseX",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "mouseY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                },
                {
                    "name": "ms",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "BaseAction"
                    }
                }
            ],
            "methods": [
                {
                    "name": "containsElement",
                    "args": [
                        {
                            "type": "Coords"
                        },
                        {
                            "name": "diagramModel",
                            "type": "DiagramModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "diagramModel",
                            "type": "DiagramModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBoxDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "{ top: number; left: number; width: number; height: number; right: number; bottom: number; }",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "extends": "BaseAction",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SelectionEvent",
            "id": "class-SelectionEvent-a1b25ab2b6c79a87bcb302a83d8d1347",
            "file": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
            "type": "class",
            "sourceCode": "import { ID, UID } from '../utils/tool-kit.util';\nimport { BaseEntity } from '../base.entity';\n\n// region events\nexport class BaseEvent<T extends BaseEntity> {\n\tentity: T;\n\tentityId: ID;\n\tstopPropagation: () => any;\n\tfiring: boolean;\n\tid: ID;\n\tpropogate: boolean;\n\n\tconstructor(entity: T, options?: any) {\n\t\tthis.id = UID();\n\t\tthis.entity = entity;\n\t\tthis.entityId = entity.id;\n\t\tthis.firing = true;\n\t\tthis.stopPropagation = () => (this.firing = false);\n\t\tthis.propogate = options ? options.propagate : null;\n\t}\n}\nexport class LockEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tlocked: boolean;\n\n\tconstructor(entity: T, locked: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.locked = locked;\n\t}\n}\nexport class ParentChangeEvent<P extends BaseEntity = BaseEntity, T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tparent: P;\n\n\tconstructor(entity: T, parent: P) {\n\t\tsuper(entity);\n\t\tthis.parent = parent;\n\t}\n}\nexport class SelectionEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisSelected: boolean;\n\n\tconstructor(entity: T, selected: boolean) {\n\t\tsuper(entity);\n\t\tthis.isSelected = selected;\n\t}\n}\nexport class PaintedEvent<T extends BaseEntity = BaseEntity> extends BaseEvent<T> {\n\tisPainted: boolean;\n\n\tconstructor(entity: T, painted: boolean = false) {\n\t\tsuper(entity);\n\t\tthis.isPainted = painted;\n\t}\n}\n// endregion\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "entity",
                        "type": "T"
                    },
                    {
                        "name": "selected",
                        "type": "boolean"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "entity",
                        "type": "T",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selected",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "entity",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "entityId",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "firing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "propogate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                },
                {
                    "name": "stopPropagation",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "BaseEvent"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "BaseEvent",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "DefaultLabelComponent",
            "id": "component-DefaultLabelComponent-69c0c4c8e5ee715e1c52e4ec296e9346",
            "file": "projects/ngx-diagrams/src/lib/defaults/components/default-label/default-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-label",
            "styleUrls": [
                "./default-label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_label",
                    "defaultValue": "new BehaviorSubject('')",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "label$",
                    "defaultValue": "this._label.pipe(this.entityPipe('label'))",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "_coords",
                    "defaultValue": "new BehaviorSubject<Coords>({ x: 0, y: 0 })",
                    "type": "BehaviorSubject<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_rotation",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "this._coords.pipe(this.entityPipe('coords'))",
                    "type": "Observable<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "rotation$",
                    "defaultValue": "this._rotation.pipe(this.entityPipe('rotation'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21,
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLabelModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "selectRotation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 43,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLabelModel",
                    "typeParameters": [],
                    "line": 18,
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "newCoords",
                            "type": "Partial<Coords>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "setRotation",
                    "args": [
                        {
                            "name": "angle",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "angle",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LabelModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultLabelModel } from '../../models/default-label.model';\n\n@Component({\n\tselector: 'ngdx-default-label',\n\ttemplateUrl: './default-label.component.html',\n\tstyleUrls: ['./default-label.component.scss']\n})\nexport class DefaultLabelComponent extends DefaultLabelModel {\n\tconstructor() {\n\t\tsuper('ngdx-default-label');\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".default-label {\n\tcolor: white;\n\tuser-select: none;\n}\n",
                    "styleUrl": "./default-label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultLabelModel",
            "templateData": "<div\n\tclass=\"default-label\"\n\t[ngStyle]=\"{\n\t\ttransform:\n\t\t\t'translate(' +\n\t\t\t(selectCoords() | async).x +\n\t\t\t'px, ' +\n\t\t\t(selectCoords() | async).y +\n\t\t\t'px)' +\n\t\t\t'rotate(' +\n\t\t\t(selectRotation() | async) +\n\t\t\t'deg)'\n\t}\"\n>\n\t{{ label$ | async }}\n</div>\n"
        },
        {
            "name": "DefaultLinkComponent",
            "id": "component-DefaultLinkComponent-3f945db5fb1f194c3c08da6478638a17",
            "file": "projects/ngx-diagrams/src/lib/defaults/components/default-link/default-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-link",
            "styleUrls": [
                "./default-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_path$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "label$",
                    "type": "Observable<LabelModel>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "labelLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'labelLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "path$",
                    "defaultValue": "this._path$.pipe(this.entityPipe('path'))",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "pathFinding",
                    "type": "PathFinding",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "points$",
                    "defaultValue": "new BehaviorSubject([])",
                    "type": "BehaviorSubject<PointModel[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "_color$",
                    "defaultValue": "new BehaviorSubject('rgba(255,255,255,0.5)')",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "_curvyness$",
                    "defaultValue": "new BehaviorSubject(50)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "_width$",
                    "defaultValue": "new BehaviorSubject(3)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "color$",
                    "defaultValue": "this._color$.pipe(this.entityPipe('color'))",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "curvyness$",
                    "defaultValue": "this._curvyness$.pipe(this.entityPipe('curvyness'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "width$",
                    "defaultValue": "this._width$.pipe(this.entityPipe('width'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "_label$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<LabelModel>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "diagramEngine",
                    "type": "DiagramEngine",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "extras",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "label$",
                    "defaultValue": "this._label$.pipe(this.entityPipe('label'))",
                    "type": "Observable<LabelModel>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "points",
                    "type": "PointModel[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "sourcePort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "targetPort",
                    "type": "PortModel | null",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "calcCenterOfPath",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcLabelIncline",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "Coords"
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "secondPoint",
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "trackByPoints",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 28,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 24,
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setCurvyness",
                    "args": [
                        {
                            "name": "curvyness",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "curvyness",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultLinkModel"
                    }
                },
                {
                    "name": "addPoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "P"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [
                        "P"
                    ],
                    "line": 220,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "object",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "generatePoint",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 227,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getFirstPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 127,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "LabelModel",
                    "typeParameters": [],
                    "line": 187,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getLastPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 131,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointForPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointIndex",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPointModel",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel | null",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "PointModel[]",
                    "typeParameters": [],
                    "line": 167,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getPortForPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getSourcePort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 145,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getTargetPort",
                    "args": [],
                    "optional": false,
                    "returnType": "PortModel",
                    "typeParameters": [],
                    "line": 149,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "isLastPoint",
                    "args": [
                        {
                            "name": "point",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "point",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "point",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "PointModel",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removeMiddlePoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePoint",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsAfter",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "removePointsBefore",
                    "args": [
                        {
                            "name": "pointModel",
                            "type": "PointModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "jsdoctags": [
                        {
                            "name": "pointModel",
                            "type": "PointModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "resetLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "selectLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LabelModel | null>",
                    "typeParameters": [],
                    "line": 183,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedLinkModel",
                    "typeParameters": [],
                    "line": 33,
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "LabelModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "LabelModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "PointModel[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "PointModel[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setSourcePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "setTargetPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "LinkModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, AfterViewInit, ChangeDetectorRef, ViewChild, ViewContainerRef, OnInit } from '@angular/core';\nimport { DefaultLinkModel } from '../../models/default-link.model';\nimport { generateCurvePath, generateDynamicPath } from '../../../utils/tool-kit.util';\nimport { combineLatest, BehaviorSubject, Observable } from 'rxjs';\nimport { PointModel } from '../../../models/point.model';\nimport { LabelModel } from '../../../models/label.model';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Coords } from '../../../interfaces';\nimport { PathFinding } from '../../../plugins/smart-routing.plugin';\n\n@Component({\n\tselector: 'ngdx-default-link',\n\ttemplateUrl: './default-link.component.html',\n\tstyleUrls: ['./default-link.component.scss'],\n})\nexport class DefaultLinkComponent extends DefaultLinkModel implements AfterViewInit, OnInit {\n\t@ViewChild('labelLayer', { read: ViewContainerRef, static: true }) labelLayer: ViewContainerRef;\n\n\t_path$: BehaviorSubject<string> = new BehaviorSubject(null);\n\tpath$: Observable<string> = this._path$.pipe(this.entityPipe('path'));\n\tpoints$: BehaviorSubject<PointModel[]> = new BehaviorSubject([]);\n\tlabel$: Observable<LabelModel>;\n\tpathFinding: PathFinding; // only set when smart routing is active\n\n\tconstructor(private cdRef: ChangeDetectorRef) {\n\t\tsuper({ type: 'ngdx-default-link' });\n\t}\n\n\ttrackByPoints(i: number, point: PointModel) {\n\t\treturn point.id;\n\t}\n\n\tngOnInit() {\n\t\tif (this.diagramEngine.getSmartRouting()) {\n\t\t\tthis.pathFinding = this.diagramEngine.getPathfinding();\n\t\t}\n\t}\n\n\tngAfterViewInit() {\n\t\tconst firstPCoords$ = this.getFirstPoint().selectCoords();\n\t\tconst lastPCoords$ = this.getLastPoint().selectCoords();\n\n\t\t// Observe link coords and update drawing accordingly\n\t\tcombineLatest([firstPCoords$, lastPCoords$])\n\t\t\t.pipe(takeUntil(this.onEntityDestroy()))\n\t\t\t.subscribe(([firstPCoords, lastPCoords]) => {\n\t\t\t\tconst points = [firstPCoords, lastPCoords];\n\n\t\t\t\tif (this.diagramEngine.getSmartRouting()) {\n\t\t\t\t\t// first step: calculate a direct path between the points being linked\n\t\t\t\t\tconst directPathCoords = this.pathFinding.calculateDirectPath(firstPCoords, lastPCoords);\n\t\t\t\t\tconst routingMatrix = this.diagramEngine.getRoutingMatrix();\n\n\t\t\t\t\t// now we need to extract, from the routing matrix, the very first walkable points\n\t\t\t\t\t// so they can be used as origin and destination of the link to be created\n\t\t\t\t\tconst smartLink = this.pathFinding.calculateLinkStartEndCoords(routingMatrix, directPathCoords);\n\n\t\t\t\t\tif (smartLink) {\n\t\t\t\t\t\tconst { start, end, pathToStart, pathToEnd } = smartLink;\n\t\t\t\t\t\t// second step: calculate a path avoiding hitting other elements\n\t\t\t\t\t\tconst simplifiedPath = this.pathFinding.calculateDynamicPath(routingMatrix, start, end, pathToStart, pathToEnd);\n\t\t\t\t\t\tconst smartPath = generateDynamicPath(simplifiedPath);\n\t\t\t\t\t\tthis._path$.next(smartPath);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// handle regular links\n\t\t\t\t\t// draw the smoothing\n\t\t\t\t\t// if the points are too close, just draw a straight line\n\t\t\t\t\tconst isHorizontal = Math.abs(firstPCoords.x - lastPCoords.x) > Math.abs(firstPCoords.y - lastPCoords.y);\n\t\t\t\t\tconst xOrY = isHorizontal ? 'x' : 'y';\n\t\t\t\t\tlet isStraight = false;\n\t\t\t\t\tif (Math.abs(points[0][xOrY] - points[1][xOrY]) < 50) {\n\t\t\t\t\t\tisStraight = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = generateCurvePath(firstPCoords, lastPCoords, isStraight ? 0 : this.curvyness);\n\t\t\t\t\tthis._path$.next(path);\n\t\t\t\t}\n\n\t\t\t\tconst label = this.getLabel();\n\t\t\t\t// update label position\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.setCoords(this.calcCenterOfPath(firstPCoords, lastPCoords));\n\n\t\t\t\t\t// TODO: check whether we want the label to rotate along with the line\n\t\t\t\t\t// label.setRotation(this.calcLabelIncline(firstPCoords, lastPCoords));\n\t\t\t\t}\n\n\t\t\t\t// TODO: handle the multiple lines in between the points\n\t\t\t\t// https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/widgets/DefaultLinkWidget.tsx#L344-L371\n\n\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t});\n\n\t\t// observe link label and draw/remove accordingly\n\t\tthis.selectLabel()\n\t\t\t.pipe(filter(Boolean))\n\t\t\t.subscribe((label: LabelModel) => {\n\t\t\t\tthis.diagramEngine.generateWidgetForLabel(label, this.labelLayer);\n\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t});\n\t}\n\n\tcalcLabelIncline(firstPoint: Coords, secondPoint: Coords): number {\n\t\tconst dy = secondPoint.y - firstPoint.y;\n\t\tconst dx = secondPoint.x - firstPoint.x;\n\n\t\tif (dx === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet inclineAngel = (Math.atan(dy / dx) * 180) / Math.PI;\n\n\t\tif (inclineAngel < 0) {\n\t\t\tinclineAngel += 180;\n\t\t}\n\n\t\treturn inclineAngel;\n\t}\n\n\tcalcCenterOfPath(firstPoint: Coords, secondPoint: Coords): Coords {\n\t\treturn { x: (firstPoint.x + secondPoint.x) / 2 + 20, y: (firstPoint.y + secondPoint.y) / 2 + 20 };\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-container {\n\tposition: relative;\n\tfill: none;\n\toverflow: visible;\n\tpointer-events: all;\n}\n\n.default-link {\n\tfill: none;\n\toverflow: visible;\n\n\t@keyframes dash {\n\t\tfrom {\n\t\t\tstroke-dashoffset: 24;\n\t\t}\n\t\tto {\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t}\n\n\t&.hovered {\n\t\tstroke: rgb(0, 192, 255);\n\t\tstroke-dasharray: 10, 2;\n\t\tanimation: dash 1s linear infinite;\n\t}\n}\n\n.default-point {\n\tcolor: lightgray;\n\toverflow: visible;\n\tpointer-events: all;\n\n\t&.hovered {\n\t\tcolor: rgb(0, 192, 255);\n\t}\n}\n",
                    "styleUrl": "./default-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DefaultLinkModel",
            "implements": [
                "AfterViewInit",
                "OnInit"
            ],
            "templateData": "<!-- Label Host -->\n<ng-template #labelLayer></ng-template>\n\n<svg class=\"link-container\">\n\t<!-- Link -->\n\t<g [id]=\"id\">\n\t\t<path\n\t\t\t[attr.stroke-width]=\"width\"\n\t\t\t[attr.stroke]=\"selectColor() | async\"\n\t\t\t[attr.d]=\"path$ | async\"\n\t\t\tclass=\"default-link\"\n\t\t\t(mouseleave)=\"setHovered(false)\"\n\t\t\t(mouseenter)=\"setHovered()\"\n\t\t\t[ngClass]=\"{ hovered: selectHovered() | async }\"\n\t\t></path>\n\t\t<path\n\t\t\tclass=\"default-link\"\n\t\t\t(mouseleave)=\"setHovered(false)\"\n\t\t\t(mouseenter)=\"setHovered()\"\n\t\t\t[attr.stroke-width]=\"20\"\n\t\t\t[attr.stroke]=\"selectColor() | async\"\n\t\t\t[attr.stroke-linecap]=\"'round'\"\n\t\t\t[attr.data-linkid]=\"id\"\n\t\t\t[attr.stroke-opacity]=\"(selectHovered() | async) ? '0.1' : '0'\"\n\t\t\t[attr.d]=\"path$ | async\"\n\t\t></path>\n\t</g>\n\n\t<!-- Points -->\n\t<g *ngFor=\"let point of getPoints(); trackBy: trackByPoints\" [id]=\"point.id\">\n\t\t<circle\n\t\t\tfill=\"currentColor\"\n\t\t\t[attr.cx]=\"point.selectX() | async\"\n\t\t\t[attr.cy]=\"point.selectY() | async\"\n\t\t\tr=\"5\"\n\t\t\tclass=\"default-point\"\n\t\t\t[ngClass]=\"{ hovered: point.selectHovered() | async }\"\n\t\t/>\n\t\t<circle\n\t\t\t[attr.data-pointid]=\"point.id\"\n\t\t\t[attr.data-linkid]=\"id\"\n\t\t\t(mouseleave)=\"point.setHovered(false); setHovered(false)\"\n\t\t\t(mouseenter)=\"point.setHovered(); setHovered()\"\n\t\t\t[attr.cx]=\"point.selectX() | async\"\n\t\t\t[attr.cy]=\"point.selectY() | async\"\n\t\t\tr=\"15\"\n\t\t\t[attr.opacity]=\"0\"\n\t\t\t[ngClass]=\"{ selected: point.selectSelected() | async }\"\n\t\t/>\n\t</g>\n</svg>\n"
        },
        {
            "name": "DefaultNodeComponent",
            "id": "component-DefaultNodeComponent-9366d3fbb97a08b3a09d4add29ffc4fb",
            "file": "projects/ngx-diagrams/src/lib/defaults/components/default-node/default-node.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-node",
            "styleUrls": [
                "./default-node.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "portsLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'portsLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "height$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "width$",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "_coords$",
                    "defaultValue": "new BehaviorSubject<Coords>({ x: 0, y: 0 })",
                    "type": "BehaviorSubject<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_diagramEngine$",
                    "defaultValue": "new BehaviorSubject<DiagramEngine>(null)",
                    "type": "BehaviorSubject<DiagramEngine>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_dimensions$",
                    "defaultValue": "new BehaviorSubject<Dimensions>({ width: 0, height: 0 })",
                    "type": "BehaviorSubject<Dimensions>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_extras$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_ports$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "coords$",
                    "defaultValue": "this._coords$.pipe(this.entityPipe('coords'))",
                    "type": "Observable<Coords>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "diagramEngine$",
                    "defaultValue": "this._diagramEngine$.pipe(this.entityPipe('diagramEngine'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensions$",
                    "defaultValue": "this._dimensions$.pipe(this.entityPipe('dimensions'))",
                    "type": "Observable<Dimensions>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "extras$",
                    "defaultValue": "this._extras$.pipe(this.entityPipe('extras'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "ports$",
                    "defaultValue": "this._ports$.pipe(this.entityPipe('ports'))",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "DefaultPortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "addInPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addOutPort",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultNodeModel"
                    }
                },
                {
                    "name": "addPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 125,
                    "description": "<p>Assign a port to the node and set the node as its getParent</p>\n",
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 3992,
                                "end": 3999,
                                "flags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>the inserted port</p>\n"
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "coordsChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 105,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "dimensionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Dimensions>",
                    "typeParameters": [],
                    "line": 168,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Coords",
                    "typeParameters": [],
                    "line": 53,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getDimensions",
                    "args": [],
                    "optional": false,
                    "returnType": "Dimensions",
                    "typeParameters": [],
                    "line": 163,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getExtras",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 206,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 172,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPort",
                    "args": [
                        {
                            "name": "id",
                            "type": "ID"
                        }
                    ],
                    "optional": false,
                    "returnType": "P",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ID",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getPorts",
                    "args": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 155,
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "ID[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 85,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 180,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "removePort",
                    "args": [
                        {
                            "name": "port",
                            "type": "P"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "P",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Coords>",
                    "typeParameters": [],
                    "line": 109,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectDiagramEngine",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectExtras",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "E"
                    ],
                    "line": 210,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [
                                {
                                    "name": "extra",
                                    "type": "E"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 195,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectPorts",
                    "args": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<P[]>",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "selector",
                            "type": "function",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 188,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 113,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 117,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "SerializedNodeModel",
                    "typeParameters": [],
                    "line": 71,
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setCoords",
                    "args": [
                        {
                            "type": "Coords"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "type": "Coords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDiagramEngine",
                    "args": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "diagramEngine",
                            "type": "DiagramEngine",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setDimensions",
                    "args": [
                        {
                            "type": "Dimensions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "jsdoctags": [
                        {
                            "type": "Dimensions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setExtras",
                    "args": [
                        {
                            "name": "extras",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "jsdoctags": [
                        {
                            "name": "extras",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setHeight",
                    "args": [
                        {
                            "name": "height",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "jsdoctags": [
                        {
                            "name": "height",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "setWidth",
                    "args": [
                        {
                            "name": "width",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 184,
                    "jsdoctags": [
                        {
                            "name": "width",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "NodeModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\nimport { DefaultNodeModel } from '../../models/default-node.model';\nimport { DefaultPortModel } from '../../models';\nimport { filter, switchMap } from 'rxjs/operators';\n\n@Component({\n\tselector: 'ngdx-default-node',\n\ttemplateUrl: './default-node.component.html',\n\tstyleUrls: ['./default-node.component.scss'],\n})\nexport class DefaultNodeComponent extends DefaultNodeModel implements OnInit {\n\t@ViewChild('portsLayer', { read: ViewContainerRef, static: true }) portsLayer: ViewContainerRef;\n\n\tconstructor() {\n\t\tsuper({ type: 'ngdx-default-node' });\n\t}\n\n\tngOnInit() {\n\t\t// when node is painted and port isn't, draw ports\n\n\t\tthis.paintChanges()\n\t\t\t.pipe(\n\t\t\t\tfilter(paintedE => paintedE.isPainted),\n\t\t\t\tswitchMap(() => this.selectPorts())\n\t\t\t)\n\t\t\t.subscribe(ports => {\n\t\t\t\tports.forEach((port: DefaultPortModel) => {\n\t\t\t\t\tif (!port.getPainted()) {\n\t\t\t\t\t\tthis.generatePort(port);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\tgeneratePort(port: DefaultPortModel) {\n\t\tconst diagramEngine = this.getDiagramEngine();\n\t\tdiagramEngine.generateWidgetForPort(port, this.portsLayer);\n\n\t\tport.paintChanges().subscribe(paintedEvent => {\n\t\t\tif (paintedEvent.isPainted) {\n\t\t\t\tport.updateCoords(diagramEngine.getPortCoords(port));\n\t\t\t}\n\t\t});\n\t}\n\n\t// https://github.com/projectstorm/react-diagrams/blob/master/src/defaults/models/DefaultNodeModel.ts\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n\t&.selected {\n\t\t.default-node {\n\t\t\tbackground-color: white !important;\n\t\t\tborder-color: blue;\n\t\t}\n\t}\n\n\t.default-node {\n\t\tpointer-events: all;\n\t\twidth: 100%;\n\t\tborder-radius: 10px;\n\t\ttransition: all 0.3s ease-in-out;\n\n\t\tcursor: auto;\n\t\t.title {\n\t\t\tpadding: 10px;\n\t\t\ttext-align: center;\n\t\t\tborder-bottom: 1px solid blue;\n\t\t}\n\t}\n\n\t.ports {\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t}\n}\n",
                    "styleUrl": "./default-node.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "extends": "DefaultNodeModel",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n\tclass=\"default-node\"\n\t[ngStyle]=\"{\n\t\t'height.px': height$ | async,\n\t\t'width.px': width$ | async,\n\t\t'background-color': color\n\t}\"\n>\n\t<div class=\"ports\">\n\t\t<ng-template #portsLayer></ng-template>\n\t</div>\n</div>\n"
        },
        {
            "name": "DefaultPortComponent",
            "id": "component-DefaultPortComponent-9dd769535cb8b5e706297263fd0d919a",
            "file": "projects/ngx-diagrams/src/lib/defaults/components/default-port/default-port.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-default-port",
            "styleUrls": [
                "./default-port.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./default-port.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "in",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "links",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "_canCreateLinks$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_height$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_links$",
                    "defaultValue": "new BehaviorSubject({})",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_magnetic$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_width$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_x$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_y$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "links$",
                    "defaultValue": "this._links$.pipe(\n\t\ttakeUntil(this.onEntityDestroy()),\n\t\tdistinctUntilChanged(),\n\t\tshareReplay(1)\n\t)",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "linkType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "magnetic$",
                    "defaultValue": "this._magnetic$.pipe(this.entityPipe('magnetic'))",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "maximumLinks",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "x$",
                    "defaultValue": "this._x$.pipe(this.entityPipe('x'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "y$",
                    "defaultValue": "this._y$.pipe(this.entityPipe('y'))",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "_hovered$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_painted$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_parent$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<X>",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_selected$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "hovered$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "painted$",
                    "type": "Observable<PaintedEvent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parent$",
                    "defaultValue": "this._parent$.pipe(\n\t\tthis.entityPipe('ParentsChange'),\n\t\tmap(p => new ParentChangeEvent<X>(this, p))\n\t)",
                    "type": "Observable<ParentChangeEvent<X>>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selected$",
                    "type": "Observable<SelectionEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112,
                        132
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "_destroyed",
                    "defaultValue": "new Subject()",
                    "type": "Subject<null>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_destroyed$",
                    "defaultValue": "this._destroyed.asObservable()",
                    "type": "Observable<null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_id",
                    "type": "ID",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked",
                    "defaultValue": "new BehaviorSubject(false)",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_locked$",
                    "defaultValue": "this._locked.pipe(\n\t\tthis.entityPipe('locked'),\n\t\tmap(locked => new LockEvent(this, locked))\n\t)",
                    "type": "Observable<LockEvent>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "_logPrefix",
                    "type": "string",
                    "optional": false,
                    "description": "<p>a prefix to make logs more easier</p>\n",
                    "line": 13,
                    "modifierKind": [
                        112
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "link",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "LinkModel",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DefaultPortModel"
                    }
                },
                {
                    "name": "addLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "canLinkToPort",
                    "args": [
                        {
                            "name": "port",
                            "type": "PortModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 168,
                    "jsdoctags": [
                        {
                            "name": "port",
                            "type": "PortModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "createLinkModel",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 176,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getCoords",
                    "args": [],
                    "optional": false,
                    "returnType": "{ x: any; y: any; }",
                    "typeParameters": [],
                    "line": 79,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 153,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getLinkType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 91,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getMaximumLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 127,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getNode",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 123,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getX",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 115,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getY",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 111,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "isLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "removeLink",
                    "args": [
                        {
                            "name": "link",
                            "type": "LinkModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "LinkModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectCanCreateLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 83,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 157,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectMagnetic",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectX",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 103,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "selectY",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 107,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setCanCreateLinks",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setLinkType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMagnetic",
                    "args": [
                        {
                            "name": "magnetic",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "magnetic",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "setMaximumLinks",
                    "args": [
                        {
                            "name": "maximumLinks",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "maximumLinks",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "updateCoords",
                    "args": [
                        {
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "PortModel"
                    }
                },
                {
                    "name": "getHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 64,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getPainted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getParent",
                    "args": [],
                    "optional": false,
                    "returnType": "X",
                    "typeParameters": [],
                    "line": 44,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getSelectedEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "BaseModel[]",
                    "typeParameters": [],
                    "line": 100,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 80,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "paintChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<PaintedEvent>",
                    "typeParameters": [],
                    "line": 76,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "parentChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ParentChangeEvent<X>>",
                    "typeParameters": [],
                    "line": 52,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectHovered",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectionChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<SelectionEvent>",
                    "typeParameters": [],
                    "line": 96,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "selectSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setHovered",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setPainted",
                    "args": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "painted",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setParent",
                    "args": [
                        {
                            "name": "parent",
                            "type": "X"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "parent",
                            "type": "X",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "setSelected",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseModel"
                    }
                },
                {
                    "name": "clone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "destroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "doClone",
                    "args": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}"
                        },
                        {
                            "name": "clone",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "lookupTable",
                            "type": "literal type",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clone",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "entityPipe",
                    "args": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "logMessage",
                            "type": "string",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "getLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "lockChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<LockEvent>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "onEntityDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<BaseEvent<BaseEntity>>",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "serialize",
                    "args": [],
                    "optional": false,
                    "returnType": "{ id: any; locked: boolean; }",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        114
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "setLocked",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                },
                {
                    "name": "withLog",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseEntity"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { DefaultPortModel } from '../../models/default-port.model';\n\n@Component({\n\tselector: 'ngdx-default-port',\n\ttemplateUrl: './default-port.component.html',\n\tstyleUrls: ['./default-port.component.scss']\n})\nexport class DefaultPortComponent extends DefaultPortModel {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n\tposition: relative;\n\twidth: 10px;\n\theight: 10px;\n\tborder-radius: 60px;\n\tborder: 1px solid gray;\n\tbackground-color: lightgray;\n\tmargin: 10px 0;\n\n\t&:hover {\n\t\tbackground-color: green;\n\t}\n\n\t&.out {\n\t\tright: -195px;\n\t}\n\n\t&.in {\n\t\tleft: -5px;\n\t}\n}\n",
                    "styleUrl": "./default-port.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "DefaultPortModel",
            "templateData": "<div [ngClass]=\"in ? 'in' : 'out'\" draggable=\"false\"></div>\n"
        },
        {
            "name": "NgxDiagramComponent",
            "id": "component-NgxDiagramComponent-15998702ca25bc0b73974b5cf953dd46",
            "file": "projects/ngx-diagrams/src/lib/containers/diagram/diagram.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngdx-diagram",
            "styleUrls": [
                "diagram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "diagram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowCanvasTranslation",
                    "defaultValue": "true",
                    "line": 39
                },
                {
                    "name": "allowCanvasZoom",
                    "defaultValue": "true",
                    "line": 38
                },
                {
                    "name": "allowLooseLinks",
                    "defaultValue": "true",
                    "line": 41
                },
                {
                    "name": "inverseZoom",
                    "defaultValue": "true",
                    "line": 40
                },
                {
                    "name": "maxZoomIn",
                    "defaultValue": "null",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "maxZoomOut",
                    "defaultValue": "null",
                    "line": 42,
                    "type": "number"
                },
                {
                    "name": "model",
                    "line": 37,
                    "type": "DiagramModel"
                },
                {
                    "name": "portMagneticRadius",
                    "defaultValue": "30",
                    "line": 44
                },
                {
                    "name": "smartRouting",
                    "defaultValue": "false",
                    "line": 45
                }
            ],
            "outputsClass": [
                {
                    "name": "actionStartedFiring",
                    "defaultValue": "new EventEmitter()",
                    "line": 47,
                    "type": "EventEmitter<BaseAction>"
                },
                {
                    "name": "actionStillFiring",
                    "defaultValue": "new EventEmitter()",
                    "line": 48,
                    "type": "EventEmitter<BaseAction>"
                },
                {
                    "name": "actionStoppedFiring",
                    "defaultValue": "new EventEmitter()",
                    "line": 49,
                    "type": "EventEmitter<BaseAction>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "action$",
                    "defaultValue": "new BehaviorSubject(null)",
                    "type": "BehaviorSubject<BaseAction>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "canvas",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'canvas', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "destroyed$",
                    "defaultValue": "new ReplaySubject(1)",
                    "type": "ReplaySubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "links$",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "linksLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'linksLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "mouseMoveListener",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 553,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mouseUpListener",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 552,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "nodes$",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "nodesLayer",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nodesLayer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "nodesRendered$",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onMouseMove",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 325,
                    "jsdoctags": [
                        {
                            "pos": 10461,
                            "end": 10474,
                            "flags": 0,
                            "kind": 288,
                            "atToken": {
                                "pos": 10461,
                                "end": 10462,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 10462,
                                "end": 10473,
                                "flags": 0,
                                "escapedText": "description"
                            },
                            "comment": "<p>Mouse Move Event Handler</p>\n"
                        },
                        {
                            "pos": 10503,
                            "end": 10529,
                            "flags": 0,
                            "kind": 292,
                            "atToken": {
                                "pos": 10503,
                                "end": 10504,
                                "flags": 0,
                                "kind": 57
                            },
                            "tagName": {
                                "pos": 10504,
                                "end": 10509,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "name": {
                                "pos": 10510,
                                "end": 10515,
                                "flags": 0,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false,
                            "comment": "<p>MouseEvent</p>\n"
                        }
                    ]
                },
                {
                    "name": "onMouseUp",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 212
                }
            ],
            "methodsClass": [
                {
                    "name": "fireAction",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "description": "<p>fire the action registered and notify subscribers</p>\n"
                },
                {
                    "name": "getMouseElement",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 167,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "onMouseDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 436,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseWheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "WheelEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 501,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "WheelEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectAction",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154
                },
                {
                    "name": "shouldDrawSelectionBox",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 158
                },
                {
                    "name": "startFiringAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "BaseAction"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "description": "<p>Register the new action, pre firing and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "BaseAction",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopFiringAction",
                    "args": [
                        {
                            "name": "shouldSkipEvent",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "description": "<p>Unregister the action, post firing and notify subscribers</p>\n",
                    "jsdoctags": [
                        {
                            "name": "shouldSkipEvent",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n\tComponent,\n\tOnInit,\n\tInput,\n\tRenderer2,\n\tOutput,\n\tEventEmitter,\n\tViewChild,\n\tViewContainerRef,\n\tElementRef,\n\tAfterViewInit,\n\tChangeDetectionStrategy,\n\tChangeDetectorRef,\n\tOnDestroy,\n} from '@angular/core';\nimport { DiagramModel } from '../../models/diagram.model';\nimport { NodeModel } from '../../models/node.model';\nimport { LinkModel } from '../../models/link.model';\nimport { BehaviorSubject, Observable, combineLatest, ReplaySubject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { BaseAction, MoveCanvasAction, SelectingAction, LinkCreatedAction, InvalidLinkDestroyed } from '../../actions';\nimport { BaseModel } from '../../models/base.model';\nimport { MoveItemsAction } from '../../actions/move-items.action';\nimport { PointModel } from '../../models/point.model';\nimport { Coords } from '../../interfaces/coords.interface';\nimport { PortModel } from '../../models/port.model';\nimport { LooseLinkDestroyed } from '../../actions/loose-link-destroyed.action';\n\n@Component({\n\tselector: 'ngdx-diagram',\n\ttemplateUrl: 'diagram.component.html',\n\tstyleUrls: ['diagram.component.scss'],\n\tchangeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxDiagramComponent implements OnInit, AfterViewInit, OnDestroy {\n\t// eslint-disable-next-line @angular-eslint/no-input-rename\n\t@Input('model') diagramModel: DiagramModel;\n\t@Input() allowCanvasZoom = true;\n\t@Input() allowCanvasTranslation = true;\n\t@Input() inverseZoom = true;\n\t@Input() allowLooseLinks = true;\n\t@Input() maxZoomOut: number = null;\n\t@Input() maxZoomIn: number = null;\n\t@Input() portMagneticRadius = 30;\n\t@Input() smartRouting = false;\n\n\t@Output() actionStartedFiring: EventEmitter<BaseAction> = new EventEmitter();\n\t@Output() actionStillFiring: EventEmitter<BaseAction> = new EventEmitter();\n\t@Output() actionStoppedFiring: EventEmitter<BaseAction> = new EventEmitter();\n\n\t@ViewChild('nodesLayer', { read: ViewContainerRef, static: true }) nodesLayer: ViewContainerRef;\n\t@ViewChild('linksLayer', { read: ViewContainerRef, static: true }) linksLayer: ViewContainerRef;\n\t@ViewChild('canvas', { read: ElementRef, static: true }) canvas: ElementRef;\n\n\tprivate nodes$: Observable<{ [s: string]: NodeModel }>;\n\tprivate links$: Observable<{ [s: string]: LinkModel }>;\n\tprivate action$: BehaviorSubject<BaseAction> = new BehaviorSubject(null);\n\tprivate nodesRendered$: BehaviorSubject<boolean>;\n\tprivate destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n\tconstructor(private renderer: Renderer2, private cdRef: ChangeDetectorRef) {}\n\n\t// TODO: handle destruction of container, resseting all observables to avoid memory leaks!\n\tngOnInit() {\n\t\tif (this.diagramModel) {\n\t\t\tthis.diagramModel.getDiagramEngine().setCanvas(this.canvas.nativeElement);\n\t\t\tthis.diagramModel.getDiagramEngine().setSmartRoutingStatus(this.smartRouting);\n\n\t\t\tthis.nodes$ = this.diagramModel.selectNodes();\n\t\t\tthis.links$ = this.diagramModel.selectLinks();\n\t\t\tthis.nodesRendered$ = new BehaviorSubject(false);\n\n\t\t\tthis.diagramModel.setMaxZoomIn(this.maxZoomIn);\n\t\t\tthis.diagramModel.setMaxZoomOut(this.maxZoomOut);\n\n\t\t\tthis.nodes$.pipe(takeUntil(this.destroyed$)).subscribe(nodes => {\n\t\t\t\tthis.nodesRendered$.next(false);\n\t\t\t\tObject.values(nodes).forEach(node => {\n\t\t\t\t\tif (!node.getPainted()) {\n\t\t\t\t\t\tthis.diagramModel.getDiagramEngine().generateWidgetForNode(node, this.nodesLayer);\n\t\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tthis.nodesRendered$.next(true);\n\t\t\t});\n\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tthis.destroyed$.next(true);\n\t\tthis.destroyed$.complete();\n\t}\n\n\tngAfterViewInit() {\n\t\tcombineLatest([this.nodesRendered$, this.links$])\n\t\t\t.pipe(\n\t\t\t\ttakeUntil(this.destroyed$),\n\t\t\t\tfilter(([nodesRendered, _]) => !!nodesRendered)\n\t\t\t)\n\t\t\t.subscribe(([_, links]) => {\n\t\t\t\tObject.values(links).forEach(link => {\n\t\t\t\t\tif (!link.getPainted() && link.getSourcePort().getPainted()) {\n\t\t\t\t\t\tif (link.getSourcePort() !== null) {\n\t\t\t\t\t\t\tconst portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getSourcePort());\n\t\t\t\t\t\t\tlink.getPoints()[0].setCoords(portCenter);\n\n\t\t\t\t\t\t\tconst portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getSourcePort());\n\t\t\t\t\t\t\tlink.getSourcePort().updateCoords(portCoords);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (link.getTargetPort() !== null) {\n\t\t\t\t\t\t\tconst portCenter = this.diagramModel.getDiagramEngine().getPortCenter(link.getTargetPort());\n\t\t\t\t\t\t\tlink.getPoints()[link.getPoints().length - 1].setCoords(portCenter);\n\n\t\t\t\t\t\t\tconst portCoords = this.diagramModel.getDiagramEngine().getPortCoords(link.getTargetPort());\n\t\t\t\t\t\t\tlink.getTargetPort().updateCoords(portCoords);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.diagramModel.getDiagramEngine().generateWidgetForLink(link, this.linksLayer);\n\t\t\t\t\t\tthis.cdRef.detectChanges();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t/**\n\t * fire the action registered and notify subscribers\n\t */\n\tfireAction() {\n\t\tif (this.action$.value) {\n\t\t\tthis.actionStillFiring.emit(this.action$.value);\n\t\t}\n\t}\n\n\t/**\n\t * Unregister the action, post firing and notify subscribers\n\t */\n\tstopFiringAction(shouldSkipEvent?: boolean) {\n\t\tif (!shouldSkipEvent) {\n\t\t\tthis.actionStoppedFiring.emit(this.action$.value);\n\t\t}\n\t\tthis.action$.next(null);\n\t}\n\n\t/**\n\t * Register the new action, pre firing and notify subscribers\n\t */\n\tstartFiringAction(action: BaseAction) {\n\t\tthis.action$.next(action);\n\t\tthis.actionStartedFiring.emit(action);\n\t}\n\n\tselectAction() {\n\t\treturn this.action$ as BehaviorSubject<SelectingAction>;\n\t}\n\n\tshouldDrawSelectionBox() {\n\t\tconst action = this.action$.getValue();\n\t\tif (action instanceof SelectingAction) {\n\t\t\taction.getBoxDimensions();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tgetMouseElement(event: MouseEvent): { model: BaseModel; element: Element } {\n\t\tconst target = event.target as Element;\n\n\t\t// is it a port?\n\t\tlet element = target.closest('[data-portid]');\n\t\tif (element) {\n\t\t\t// get the relevant node and return the port.\n\t\t\tconst nodeEl = target.closest('[data-nodeid]');\n\t\t\treturn {\n\t\t\t\tmodel: this.diagramModel.getNode(nodeEl.getAttribute('data-nodeid')).getPort(element.getAttribute('data-portid')),\n\t\t\t\telement,\n\t\t\t};\n\t\t}\n\n\t\t// look for a point\n\t\telement = target.closest('[data-pointid]');\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: this.diagramModel.getLink(element.getAttribute('data-linkid')).getPointModel(element.getAttribute('data-pointid')),\n\t\t\t\telement,\n\t\t\t};\n\t\t}\n\n\t\t// look for a link\n\t\telement = target.closest('[data-linkid]');\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: this.diagramModel.getLink(element.getAttribute('data-linkid')),\n\t\t\t\telement,\n\t\t\t};\n\t\t}\n\n\t\t// a node maybe\n\t\telement = target.closest('[data-nodeid]');\n\t\tif (element) {\n\t\t\treturn {\n\t\t\t\tmodel: this.diagramModel.getNode(element.getAttribute('data-nodeid')),\n\t\t\t\telement,\n\t\t\t};\n\t\t}\n\n\t\t// just the canvas\n\t\treturn null;\n\t}\n\n\tonMouseUp = (event: MouseEvent) => {\n\t\tconst diagramEngine = this.diagramModel.getDiagramEngine();\n\t\tconst action = this.action$.getValue();\n\t\t// are we going to connect a link to something?\n\t\tif (action instanceof MoveItemsAction) {\n\t\t\tconst element = this.getMouseElement(event);\n\t\t\taction.selectionModels.forEach(model => {\n\t\t\t\t// only care about points connecting to things\n\t\t\t\tif (!model || !(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet el: BaseModel;\n\t\t\t\tif (model.magnet) {\n\t\t\t\t\tel = model.magnet;\n\t\t\t\t} else if (element && element.model) {\n\t\t\t\t\tel = element.model;\n\t\t\t\t}\n\n\t\t\t\tif (el instanceof PortModel && !diagramEngine.isModelLocked(el)) {\n\t\t\t\t\tconst link = model.model.getLink();\n\t\t\t\t\tif (link.getTargetPort() !== null) {\n\t\t\t\t\t\t// if this was a valid link already and we are adding a node in the middle, create 2 links from the original\n\t\t\t\t\t\tif (link.getTargetPort() !== el && link.getSourcePort() !== el) {\n\t\t\t\t\t\t\tconst targetPort = link.getTargetPort();\n\t\t\t\t\t\t\tconst newLink = link.clone({});\n\t\t\t\t\t\t\tnewLink.setSourcePort(el);\n\t\t\t\t\t\t\tnewLink.setTargetPort(targetPort);\n\t\t\t\t\t\t\tlink.setTargetPort(el);\n\t\t\t\t\t\t\ttargetPort.removeLink(link);\n\t\t\t\t\t\t\tnewLink.removePointsBefore(newLink.getPoints()[link.getPointIndex(model.model)]);\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t\tdiagramEngine.getDiagramModel().addLink(newLink);\n\t\t\t\t\t\t\t// if we are connecting to the same target or source, destroy tweener points\n\t\t\t\t\t\t} else if (link.getTargetPort() === el) {\n\t\t\t\t\t\t\tlink.removePointsAfter(model.model);\n\t\t\t\t\t\t} else if (link.getSourcePort() === el) {\n\t\t\t\t\t\t\tlink.removePointsBefore(model.model);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlink.setTargetPort(el);\n\t\t\t\t\t\tconst targetPort = link.getTargetPort();\n\t\t\t\t\t\tconst srcPort = link.getSourcePort();\n\n\t\t\t\t\t\tif (targetPort.id !== srcPort.id && srcPort.canLinkToPort(targetPort)) {\n\t\t\t\t\t\t\t// link is valid, fire the event\n\t\t\t\t\t\t\tthis.startFiringAction(new LinkCreatedAction(event.clientX, event.clientY, link));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// reset current magent\n\t\t\t\tmodel.magnet = undefined;\n\t\t\t});\n\n\t\t\t// check for / destroy any loose links in any models which have been moved\n\t\t\tif (!this.allowLooseLinks) {\n\t\t\t\taction.selectionModels.forEach(model => {\n\t\t\t\t\t// only care about points connecting to things\n\t\t\t\t\tif (!model || !(model.model instanceof PointModel)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst selectedPoint: PointModel = model.model;\n\t\t\t\t\tconst link: LinkModel = selectedPoint.getLink();\n\t\t\t\t\tif (link.getSourcePort() === null || link.getTargetPort() === null) {\n\t\t\t\t\t\tlink.destroy();\n\t\t\t\t\t\tthis.startFiringAction(new LooseLinkDestroyed(event.clientX, event.clientY, link));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// destroy any invalid links\n\t\t\taction.selectionModels.forEach(model => {\n\t\t\t\t// only care about points connecting to things\n\t\t\t\tif (!model || !(model.model instanceof PointModel)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst link: LinkModel = model.model.getLink();\n\t\t\t\tconst sourcePort: PortModel = link.getSourcePort();\n\t\t\t\tconst targetPort: PortModel = link.getTargetPort();\n\n\t\t\t\tif (sourcePort !== null && targetPort !== null) {\n\t\t\t\t\tif (!sourcePort.canLinkToPort(targetPort)) {\n\t\t\t\t\t\t// link not allowed\n\t\t\t\t\t\tlink.destroy();\n\t\t\t\t\t\tthis.startFiringAction(new InvalidLinkDestroyed(event.clientX, event.clientY, link));\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tObject.values(targetPort.getLinks()).some(\n\t\t\t\t\t\t\t(l: LinkModel) => l !== link && (l.getSourcePort() === sourcePort || l.getTargetPort() === sourcePort)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// link is a duplicate\n\t\t\t\t\t\tlink.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.stopFiringAction();\n\t\t} else {\n\t\t\tthis.stopFiringAction();\n\t\t}\n\n\t\tthis.mouseUpListener();\n\t\tthis.mouseMoveListener();\n\t\tthis.action$.next(null);\n\t};\n\n\t/**\n\t * @description Mouse Move Event Handler\n\t * @param event MouseEvent\n\t */\n\tonMouseMove = (event: MouseEvent) => {\n\t\tconst action = this.action$.getValue();\n\n\t\tif (action === null || action === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (action instanceof SelectingAction) {\n\t\t\tconst relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n\n\t\t\tObject.values(this.diagramModel.getNodes()).forEach(node => {\n\t\t\t\tif ((action as SelectingAction).containsElement(node.getCoords(), this.diagramModel)) {\n\t\t\t\t\tnode.setSelected();\n\t\t\t\t} else {\n\t\t\t\t\tnode.setSelected(false);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tObject.values(this.diagramModel.getLinks()).forEach(link => {\n\t\t\t\tlet allSelected = true;\n\t\t\t\tlink.getPoints().forEach(point => {\n\t\t\t\t\tif ((action as SelectingAction).containsElement(point.getCoords(), this.diagramModel)) {\n\t\t\t\t\t\tpoint.setSelected();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpoint.setSelected(false);\n\t\t\t\t\t\tallSelected = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (allSelected) {\n\t\t\t\t\tlink.setSelected();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taction.mouseX2 = relative.x;\n\t\t\taction.mouseY2 = relative.y;\n\n\t\t\tthis.fireAction();\n\t\t\tthis.action$.next(action);\n\t\t\treturn;\n\t\t} else if (action instanceof MoveItemsAction) {\n\t\t\tconst coords: Coords = {\n\t\t\t\tx: event.clientX - action.mouseX,\n\t\t\t\ty: event.clientY - action.mouseY,\n\t\t\t};\n\t\t\tconst amountZoom = this.diagramModel.getZoomLevel() / 100;\n\t\t\taction.selectionModels.forEach(selectionModel => {\n\t\t\t\t// reset all previous magnets if any\n\t\t\t\tselectionModel.magnet = undefined;\n\n\t\t\t\t// in this case we need to also work out the relative grid position\n\t\t\t\tif (\n\t\t\t\t\tselectionModel.model instanceof NodeModel ||\n\t\t\t\t\t(selectionModel.model instanceof PointModel && !selectionModel.model.isConnectedToPort())\n\t\t\t\t) {\n\t\t\t\t\tconst newCoords = { x: selectionModel.initialX + coords.x / amountZoom, y: selectionModel.initialY + coords.y / amountZoom };\n\t\t\t\t\tconst gridRelativeCoords = this.diagramModel.getGridPosition(newCoords);\n\n\t\t\t\t\t// magnetic inputs handling\n\t\t\t\t\tif (selectionModel.model instanceof PointModel && this.portMagneticRadius) {\n\t\t\t\t\t\t// get all ports on canvas, check distances, if smaller then defined radius, magnetize!\n\t\t\t\t\t\tconst portsMap = this.diagramModel.getAllPorts({ filter: p => p.getMagnetic() });\n\n\t\t\t\t\t\tfor (const port of portsMap.values()) {\n\t\t\t\t\t\t\tconst portCoords = port.getCoords();\n\t\t\t\t\t\t\tconst distance = Math.hypot(portCoords.x - newCoords.x, portCoords.y - newCoords.y);\n\t\t\t\t\t\t\tif (distance <= this.portMagneticRadius) {\n\t\t\t\t\t\t\t\tconst portCenter = this.diagramModel.getDiagramEngine().getPortCenter(port);\n\t\t\t\t\t\t\t\tselectionModel.model.setCoords(portCenter);\n\t\t\t\t\t\t\t\tselectionModel.magnet = port;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tselectionModel.model.setCoords(gridRelativeCoords);\n\n\t\t\t\t\tif (selectionModel.model instanceof NodeModel) {\n\t\t\t\t\t\t// update port coordinates as well\n\t\t\t\t\t\tObject.values(selectionModel.model.getPorts()).forEach(port => {\n\t\t\t\t\t\t\tconst portCoords = this.diagramModel.getDiagramEngine().getPortCoords(port);\n\t\t\t\t\t\t\tport.updateCoords(portCoords);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.diagramModel.getDiagramEngine().getSmartRouting()) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.diagramModel.getDiagramEngine().calculateRoutingMatrix();\n\t\t\t\t\t\t}, 1);\n\t\t\t\t\t}\n\t\t\t\t} else if (selectionModel.model instanceof PointModel) {\n\t\t\t\t\t// will only run here when trying to create a point on an existing link\n\t\t\t\t\t// we want points that are connected to ports, to not necessarily snap to grid\n\t\t\t\t\t// this stuff needs to be pixel perfect, dont touch it\n\t\t\t\t\tconst newCoords = this.diagramModel.getGridPosition({ x: coords.x / amountZoom, y: coords.y / amountZoom });\n\t\t\t\t\tselectionModel.model.setCoords({ x: selectionModel.initialX + newCoords.x, y: selectionModel.initialY + newCoords.y });\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.fireAction();\n\t\t} else if (action instanceof MoveCanvasAction) {\n\t\t\tif (this.allowCanvasTranslation) {\n\t\t\t\tthis.diagramModel.setOffset(\n\t\t\t\t\taction.initialOffsetX + (event.clientX - action.mouseX),\n\t\t\t\t\taction.initialOffsetY + (event.clientY - action.mouseY)\n\t\t\t\t);\n\t\t\t\tthis.fireAction();\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseDown(event: MouseEvent) {\n\t\tif (event.button === 3) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selectedModel = this.getMouseElement(event);\n\n\t\t// canvas selected\n\t\tif (selectedModel === null) {\n\t\t\t// multiple selection\n\t\t\tif (event.shiftKey) {\n\t\t\t\t// initiate multiple selection selector\n\t\t\t\tconst relative = this.diagramModel.getDiagramEngine().getRelativePoint(event.clientX, event.clientY);\n\t\t\t\tthis.startFiringAction(new SelectingAction(relative.x, relative.y));\n\t\t\t} else {\n\t\t\t\t// drag canvas action\n\t\t\t\tthis.diagramModel.clearSelection();\n\t\t\t\tthis.startFiringAction(new MoveCanvasAction(event.clientX, event.clientY, this.diagramModel));\n\t\t\t}\n\t\t} else if (selectedModel.model instanceof PortModel) {\n\t\t\t// its a port element, we want to drag a link\n\t\t\tif (!selectedModel.model.isLocked() && selectedModel.model.getCanCreateLinks()) {\n\t\t\t\tconst relative = this.diagramModel.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\tconst sourcePort = selectedModel.model;\n\t\t\t\tconst link = sourcePort.createLinkModel();\n\n\t\t\t\t// if we don't have a link then we have reached the max amount, or we cannot create new ones\n\t\t\t\tif (link) {\n\t\t\t\t\tlink.setSourcePort(sourcePort);\n\t\t\t\t\tlink.removeMiddlePoints();\n\t\t\t\t\tif (link.getSourcePort() !== sourcePort) {\n\t\t\t\t\t\tlink.setSourcePort(sourcePort);\n\t\t\t\t\t}\n\t\t\t\t\tlink.setTargetPort(null);\n\n\t\t\t\t\tlink.getFirstPoint().setCoords(relative);\n\t\t\t\t\tlink.getLastPoint().setCoords(relative);\n\n\t\t\t\t\tthis.diagramModel.clearSelection();\n\t\t\t\t\tlink.getLastPoint().setSelected();\n\t\t\t\t\tthis.diagramModel.addLink(link);\n\n\t\t\t\t\tthis.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine()));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.diagramModel.clearSelection();\n\t\t\t}\n\t\t} else if (selectedModel.model instanceof PointModel && selectedModel.model.isConnectedToPort()) {\n\t\t\tthis.diagramModel.clearSelection();\n\t\t} else {\n\t\t\t// its some other element, probably want to move it\n\t\t\tif (!event.shiftKey && !selectedModel.model.getSelected()) {\n\t\t\t\tthis.diagramModel.clearSelection();\n\t\t\t}\n\n\t\t\tselectedModel.model.setSelected();\n\n\t\t\tthis.startFiringAction(new MoveItemsAction(event.clientX, event.clientY, this.diagramModel.getDiagramEngine()));\n\t\t}\n\n\t\t// create mouseMove and mouseUp listeners\n\t\tthis.mouseMoveListener = this.renderer.listen(document, 'mousemove', this.onMouseMove);\n\t\tthis.mouseUpListener = this.renderer.listen(document, 'mouseup', this.onMouseUp);\n\t}\n\n\tonMouseWheel(event: WheelEvent) {\n\t\tif (this.allowCanvasZoom) {\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\t\t\tconst currentZoomLevel = this.diagramModel.getZoomLevel();\n\n\t\t\tconst oldZoomFactor = currentZoomLevel / 100;\n\t\t\tlet scrollDelta = this.inverseZoom ? -event.deltaY : event.deltaY;\n\n\t\t\t// check if it is pinch gesture\n\t\t\tif (event.ctrlKey && scrollDelta % 1 !== 0) {\n\t\t\t\t/* Chrome and Firefox sends wheel event with deltaY that\n\t\t\t\t   have fractional part, also `ctrlKey` prop of the event is true\n\t\t\t\t   though ctrl isn't pressed\n\t\t\t\t*/\n\t\t\t\tscrollDelta /= 3;\n\t\t\t} else {\n\t\t\t\tscrollDelta /= 60;\n\t\t\t}\n\n\t\t\tif (currentZoomLevel + scrollDelta > 10) {\n\t\t\t\tconst newZoomLvl = currentZoomLevel + scrollDelta;\n\t\t\t\tthis.diagramModel.setZoomLevel(newZoomLvl);\n\t\t\t}\n\n\t\t\tconst updatedZoomLvl = this.diagramModel.getZoomLevel();\n\t\t\tconst zoomFactor = updatedZoomLvl / 100;\n\n\t\t\tconst boundingRect = (event.currentTarget as Element).getBoundingClientRect();\n\t\t\tconst clientWidth = boundingRect.width;\n\t\t\tconst clientHeight = boundingRect.height;\n\n\t\t\t// compute difference between rect before and after scroll\n\t\t\tconst widthDiff = clientWidth * zoomFactor - clientWidth * oldZoomFactor;\n\t\t\tconst heightDiff = clientHeight * zoomFactor - clientHeight * oldZoomFactor;\n\n\t\t\t// compute mouse coords relative to canvas\n\t\t\tconst clientX = event.clientX - boundingRect.left;\n\t\t\tconst clientY = event.clientY - boundingRect.top;\n\n\t\t\t// compute width and height increment factor\n\t\t\tconst xFactor = (clientX - this.diagramModel.getOffsetX()) / oldZoomFactor / clientWidth;\n\t\t\tconst yFactor = (clientY - this.diagramModel.getOffsetY()) / oldZoomFactor / clientHeight;\n\n\t\t\tconst updatedXOffset = this.diagramModel.getOffsetX() - widthDiff * xFactor;\n\t\t\tconst updatedYOffset = this.diagramModel.getOffsetY() - heightDiff * yFactor;\n\n\t\t\tthis.diagramModel.setOffset(updatedXOffset, updatedYOffset);\n\t\t}\n\t}\n\n\tprivate mouseUpListener = () => {};\n\tprivate mouseMoveListener = () => {};\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ngdx-diagram {\n\tposition: relative;\n\tflex-grow: 1;\n\tdisplay: flex;\n\tcursor: move;\n\toverflow: hidden;\n\n\t.selector {\n\t\tposition: absolute;\n\t\tbackground-color: rgba(0, 192, 255, 0.2);\n\t\tborder: solid 2px rgb(0, 192, 255);\n\t}\n\n\t.ngdx-nodes-layer {\n\t\tposition: absolute;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\ttransform-origin: 0 0;\n\t\toverflow: visible !important;\n\t\tpointer-events: none;\n\t\tz-index: 150;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t}\n\n\t.ngdx-links-layer {\n\t\tposition: absolute;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\ttransform-origin: 0 0;\n\t\toverflow: visible !important;\n\t\tpointer-events: none;\n\t\tz-index: 100;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t}\n}\n",
                    "styleUrl": "diagram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"ngdx-diagram\" #canvas (mousedown)=\"onMouseDown($event)\" (wheel)=\"onMouseWheel($event)\">\n\t<!-- Nodes Layer -->\n\t<div\n\t\tclass=\"ngdx-nodes-layer\"\n\t\t[ngStyle]=\"{\n\t\t\ttransform:\n\t\t\t\t'translate(' +\n\t\t\t\t(diagramModel.selectOffsetX() | async) +\n\t\t\t\t'px, ' +\n\t\t\t\t(diagramModel.selectOffsetY() | async) +\n\t\t\t\t'px) scale(' +\n\t\t\t\t(diagramModel.selectZoomLevel() | async) / 100.0 +\n\t\t\t\t')'\n\t\t}\"\n\t>\n\t\t<ng-template #nodesLayer></ng-template>\n\t</div>\n\n\t<!-- Links Layer -->\n\t<div\n\t\tclass=\"ngdx-links-layer\"\n\t\t[ngStyle]=\"{\n\t\t\ttransform:\n\t\t\t\t'translate(' +\n\t\t\t\t(diagramModel.selectOffsetX() | async) +\n\t\t\t\t'px, ' +\n\t\t\t\t(diagramModel.selectOffsetY() | async) +\n\t\t\t\t'px) scale(' +\n\t\t\t\t(diagramModel.selectZoomLevel() | async) / 100.0 +\n\t\t\t\t')'\n\t\t}\"\n\t>\n\t\t<ng-template #linksLayer></ng-template>\n\t</div>\n\n\t<!-- Selection Box -->\n\t<div\n\t\t*ngIf=\"shouldDrawSelectionBox() && selectAction() | async as action\"\n\t\tclass=\"selector\"\n\t\t[ngStyle]=\"{\n\t\t\ttop: action.dimensions.top + 'px',\n\t\t\tleft: action.dimensions.left + 'px',\n\t\t\twidth: action.dimensions.width + 'px',\n\t\t\theight: action.dimensions.height + 'px'\n\t\t}\"\n\t></div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "DefaultLabelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultLinkModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultLinkComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultNodeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultNodeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultNodeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DefaultPortModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DefaultPortComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DefaultPortComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxDiagramsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgxDiagramComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__DEV__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "",
                "defaultValue": "true"
            },
            {
                "name": "__LOG__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "LOG_LEVEL",
                "defaultValue": "LOG_LEVEL.ERROR"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-diagrams/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-diagrams/src/test.ts",
                "type": "any"
            },
            {
                "name": "ROUTING_SCALING_FACTOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                "type": "number",
                "defaultValue": "10"
            }
        ],
        "functions": [
            {
                "name": "arrayToMap",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arr"
                    }
                ],
                "returnType": "literal type",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "coerceArray",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "value",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "enableDiagramProdMode",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "void"
            },
            {
                "name": "entityProperty",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>rxjs entity properties operator</p>\n",
                "args": [
                    {
                        "name": "destroyedNotifier"
                    },
                    {
                        "name": "replayBy"
                    },
                    {
                        "name": "logMessage"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "destroyedNotifier",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "replayBy",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logMessage",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateCurvePath",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "firstPoint"
                    },
                    {
                        "name": "lastPoint"
                    },
                    {
                        "name": "curvy"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "firstPoint",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastPoint",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "curvy",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateDynamicPath",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "pathCoords"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "pathCoords",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateLinePath",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "firstPoint",
                        "type": "any"
                    },
                    {
                        "name": "lastPoint",
                        "type": "any"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "firstPoint",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastPoint",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isArray",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isDev",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "boolean"
            },
            {
                "name": "isFunction",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any"
                    }
                ],
                "returnType": "function",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isNil",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "v",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "v",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isString",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "val",
                        "type": "any"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "val",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "log",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "message"
                    },
                    {
                        "name": "level"
                    },
                    {
                        "name": "args",
                        "dotDotDotToken": true
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "message",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "level",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "args",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapToArray",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "map"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "map",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setLogLevel",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "level"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "level",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "UID",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Generates a unique ID</p>\n",
                "args": [],
                "returnType": "ID"
            },
            {
                "name": "withLog",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>rxjs log operator</p>\n",
                "args": [
                    {
                        "name": "message"
                    },
                    {
                        "name": "level"
                    },
                    {
                        "name": "args",
                        "type": "any",
                        "dotDotDotToken": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "message",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "level",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "args",
                        "type": "any",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BaseEntityType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"node\" | \"link\" | \"port\" | \"point\"",
                "file": "projects/ngx-diagrams/src/lib/base.entity.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ID",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "description": "",
                "kind": 137
            }
        ],
        "enumerations": [
            {
                "name": "LOG_LEVEL",
                "childs": [
                    {
                        "name": "LOG"
                    },
                    {
                        "name": "ERROR"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts"
            }
        ],
        "groupedVariables": {
            "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "__DEV__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "type": "",
                    "defaultValue": "true"
                },
                {
                    "name": "__LOG__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "type": "LOG_LEVEL",
                    "defaultValue": "LOG_LEVEL.ERROR"
                }
            ],
            "projects/ngx-diagrams/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-diagrams/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-diagrams/src/test.ts",
                    "type": "any"
                }
            ],
            "projects/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts": [
                {
                    "name": "ROUTING_SCALING_FACTOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                    "type": "number",
                    "defaultValue": "10"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "arrayToMap",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arr"
                        }
                    ],
                    "returnType": "literal type",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "coerceArray",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "enableDiagramProdMode",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                },
                {
                    "name": "entityProperty",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>rxjs entity properties operator</p>\n",
                    "args": [
                        {
                            "name": "destroyedNotifier"
                        },
                        {
                            "name": "replayBy"
                        },
                        {
                            "name": "logMessage"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "destroyedNotifier",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "replayBy",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "logMessage",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCurvePath",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "firstPoint"
                        },
                        {
                            "name": "lastPoint"
                        },
                        {
                            "name": "curvy"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastPoint",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "curvy",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateDynamicPath",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "pathCoords"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "pathCoords",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateLinePath",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "firstPoint",
                            "type": "any"
                        },
                        {
                            "name": "lastPoint",
                            "type": "any"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "firstPoint",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastPoint",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isArray",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDev",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "boolean"
                },
                {
                    "name": "isFunction",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any"
                        }
                    ],
                    "returnType": "function",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNil",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "v",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "v",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isString",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "val",
                            "type": "any"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "message"
                        },
                        {
                            "name": "level"
                        },
                        {
                            "name": "args",
                            "dotDotDotToken": true
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapToArray",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "map"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "map",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLogLevel",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "level"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "UID",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Generates a unique ID</p>\n",
                    "args": [],
                    "returnType": "ID"
                },
                {
                    "name": "withLog",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>rxjs log operator</p>\n",
                    "args": [
                        {
                            "name": "message"
                        },
                        {
                            "name": "level"
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "any",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "LOG_LEVEL",
                    "childs": [
                        {
                            "name": "LOG"
                        },
                        {
                            "name": "ERROR"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/ngx-diagrams/src/lib/base.entity.ts": [
                {
                    "name": "BaseEntityType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"node\" | \"link\" | \"port\" | \"point\"",
                    "file": "projects/ngx-diagrams/src/lib/base.entity.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts": [
                {
                    "name": "ID",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                    "description": "",
                    "kind": 137
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-diagrams/src/lib/actions/base.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/actions/invalid-link-destroyed.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "InvalidLinkDestroyed",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/actions/links-created.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LinkCreatedAction",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/actions/loose-link-destroyed.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LooseLinkDestroyed",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/actions/move-canvas.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MoveCanvasAction",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/actions/move-items.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MoveItemsAction",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/actions/selecting.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectingAction",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/base.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseEntity",
                "coveragePercent": 5,
                "coverageCount": "1/19",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/containers/diagram/diagram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxDiagramComponent",
                "coveragePercent": 8,
                "coverageCount": "3/37",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/components/default-label/default-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLabelComponent",
                "coveragePercent": 1,
                "coverageCount": "1/61",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/components/default-link/default-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "1/106",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/components/default-node/default-node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultNodeComponent",
                "coveragePercent": 2,
                "coverageCount": "2/91",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/components/default-port/default-port.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DefaultPortComponent",
                "coveragePercent": 1,
                "coverageCount": "1/93",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/factories/default-label.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/factories/default-link.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/factories/default-node.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/factories/default-port.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/models/default-label.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLabelModel",
                "coveragePercent": 2,
                "coverageCount": "4/137",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/models/default-link.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultLinkModel",
                "coveragePercent": 2,
                "coverageCount": "4/171",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/models/default-node.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultNodeModel",
                "coveragePercent": 3,
                "coverageCount": "5/164",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DefaultPortModel",
                "coveragePercent": 2,
                "coverageCount": "4/169",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/defaults/models/default-port.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DefaultPortModelConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/factories/base.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/factories/label.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractLabelFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/factories/link.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractLinkFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/factories/node.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractNodeFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/factories/port.factory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AbstractPortFactory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/coords.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Coords",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/dimensions.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dimensions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseEvent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LockEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaintedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ParentChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/event.interface.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectionEvent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/select-options.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedBaseModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedDiagramModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedLabelModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedLinkModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedNodeModel",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedPointModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/interfaces/serialization.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SerializedPortModel",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/base.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseModel",
                "coveragePercent": 2,
                "coverageCount": "1/44",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/diagram.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DiagramModel",
                "coveragePercent": 10,
                "coverageCount": "7/64",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/label.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LabelModel",
                "coveragePercent": 2,
                "coverageCount": "2/73",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/link.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LinkModel",
                "coveragePercent": 1,
                "coverageCount": "2/101",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/move-selection.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectionModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/node.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NodeModel",
                "coveragePercent": 3,
                "coverageCount": "3/99",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/point.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PointModel",
                "coveragePercent": 2,
                "coverageCount": "2/72",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/models/port.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PortModel",
                "coveragePercent": 1,
                "coverageCount": "2/104",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DagreEngine",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/plugins/dagre-engine.plugin.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DagreEngineOptions",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PathFinding",
                "coveragePercent": 50,
                "coverageCount": "3/6",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/plugins/smart-routing.plugin.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROUTING_SCALING_FACTOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/services/engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DiagramEngine",
                "coveragePercent": 14,
                "coverageCount": "9/61",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "arrayToMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "coerceArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "enableDiagramProdMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "entityProperty",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateCurvePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateDynamicPath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "generateLinePath",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isDev",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isFunction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isNil",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapToArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "setLogLevel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "UID",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "withLog",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__DEV__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/lib/utils/tool-kit.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__LOG__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-diagrams/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}